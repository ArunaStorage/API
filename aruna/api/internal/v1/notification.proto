syntax = "proto3";

package aruna.api.internal.v1;
option go_package = "github.com/ArunaStorage/go-api/aruna/api/internal/v1";

import "google/api/visibility.proto";
import "aruna/api/storage/models/v1/models.proto";
import "aruna/api/notification/services/v1/notification_service.proto";

// Service hosted by the notification service application
// the API server emits events to the notification service
// Server --> Notification System
service InternalEventEmitterService {
    option (google.api.api_visibility).restriction = "INTERNAL";
    rpc EmitEvent(EmitEventRequest) returns (EmitEventResponse) {}
}

// Service that allows the notification service to issue requests
// to the server application 
// Notification System --> Server
service InternalEventService {
    option (google.api.api_visibility).restriction = "INTERNAL";

    rpc CreateStreamGroup(CreateStreamGroupRequest) returns (CreateStreamGroupResponse) {}
    rpc GetStreamGroup(GetStreamGroupRequest) returns (GetStreamGroupResponse) {}
    rpc DeleteStreamGroup(DeleteStreamGroupRequest) returns (DeleteStreamGroupResponse) {}
    rpc GetSharedRevision(GetSharedRevisionRequest) returns (GetSharedRevisionResponse) {}
}

// ------------ InternalEventEmitterService -------------------------

message EmittedResource {
    oneof resource {
        ProjectResource project = 1;
        CollectionResource collection = 2;
        ObjectResource object = 3;
        ObjectGroupResource object_group = 4;
    }
}

message ProjectResource {
    string project_id = 1;
}

message CollectionResource {
    string project_id = 1;
    string collection_id = 2;
}

message ObjectResource {
    string project_id = 1;
    string collection_id = 2;
    string shared_object_id = 3;
    string object_id = 4;
}

message ObjectGroupResource {
    string project_id = 1;
    string collection_id = 2;
    string shared_object_group_id = 3;
    string object_group_id = 4;
}

message EmitEventRequest{
    // The resource Type e.g. Collection / Object etc.
    aruna.api.storage.models.v1.ResourceType event_resource = 1;
    // The resource ID
    string resource_id = 2;
    // Event type (CRUD)
    notification.services.v1.EventType event_type = 3;
    // All relations of the resource, only parents are shown
    repeated EmittedResource relations = 4;
}

message EmitEventResponse{}


// ------------ InternalEventService -------------------------

message StreamGroup {
    // Stream group ID
    string id = 1;
    // Event this streamgroup is listening for
    notification.services.v1.EventType event_type = 2;
    // Type of the resource (Collection, Object etc.)
    aruna.api.storage.models.v1.ResourceType resource_type = 3;
    // Resource ID
    string resource_id = 4;
    // Should all "sub" resources be included
    bool notify_on_sub_resource = 5; 
}

message CreateStreamGroupRequest {
    // Authorization for the user who wants to create this stream group
    string token = 1;
    // Event type
    notification.services.v1.EventType event_type = 2;
    // Type of the resource (Collection, Object etc.)
    aruna.api.storage.models.v1.ResourceType resource_type = 3;
    // Resource ID
    string resource_id = 4;
    // Should all "sub" resources be included
    bool notify_on_sub_resource = 5; 
} 

message CreateStreamGroupResponse {
    // The stream_group
    StreamGroup stream_group = 1;
}
message GetStreamGroupRequest {
    // User token
    string token = 1;
    // Stream group ID
    string stream_group_id = 2;
} 
message GetStreamGroupResponse {
    // Stream group
    StreamGroup stream_group = 1;
}
message DeleteStreamGroupRequest {
    // User token
    string token = 1;
    // Stream group ID
    string stream_group_id = 2;
} 
message DeleteStreamGroupResponse {}

message GetSharedRevisionRequest {
    // Resource Type (ObjectGroup or Object)
    aruna.api.storage.models.v1.ResourceType resource_type = 1;
    // Resource ID
    string resource_id = 2;
} 
message GetSharedRevisionResponse {
    // Shared revision ID
    string shared_revision_id = 1;
}