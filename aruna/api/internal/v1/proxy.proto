syntax = "proto3";

package aruna.api.internal.v1;
option go_package = "github.com/ArunaStorage/go-api/aruna/api/internal/v1";
import "aruna/api/storage/models/v1/models.proto";
import "aruna/api/storage/services/v1/object_service.proto";
import "google/api/visibility.proto";

// Definition for the internal API that is used to communicate with all internal
// components.
//
// All uploads should follow this procedure:
// 1. Init a new upload.
// 2. Create a Upload Presigned URL (The URL should contain a specifier for the
// upload and part id)
// 3. Use the presigned URL to upload individual parts, 1-x times.
// 4. When all parts are uploaded, call FinishPresignedUpload to complete the
// upload and provide the parts list.

service InternalProxyService {
  option (google.api.api_visibility).restriction = "INTERNAL";
  rpc InitMultipartUpload(InitMultipartUploadRequest)
      returns (InitMultipartUploadResponse) {}
  rpc FinishMultipartUpload(FinishMultipartUploadRequest)
      returns (FinishMultipartUploadResponse) {}
  rpc DeleteObject(DeleteObjectRequest) returns (DeleteObjectResponse) {}
}

// This service enables a "return" channel for dataproxy to aruna server communication
// Mainly used to notify the backend of validation / move events after the upload of new files
service InternalProxyNotifierService {
  option (google.api.api_visibility).restriction = "INTERNAL";
  rpc GetOrCreateObjectByPath(GetOrCreateObjectByPathRequest) returns (GetOrCreateObjectByPathResponse) {}
  rpc FinalizeObject(FinalizeObjectRequest) returns (FinalizeObjectResponse) {}
  rpc GetOrCreateEncryptionKey(GetOrCreateEncryptionKeyRequest) returns (GetOrCreateEncryptionKeyResponse) {}
  rpc GetObjectLocation(GetObjectLocationRequest) returns (GetObjectLocationResponse) {}
  rpc GetCollectionByBucket(GetCollectionByBucketRequest) returns (GetCollectionByBucketResponse) {}
}

// Enum to support multiple target Locations.
enum LocationType {
  LOCATION_TYPE_UNSPECIFIED = 0;
  LOCATION_TYPE_S3 = 1;
  LOCATION_TYPE_FILE = 2;
}

// Locations is the path to the requested data.
message Location {
  LocationType type = 1;
  string bucket = 2; // This is the bucket name for S3. This is the folder name
                     // for local file.
  string path =
      3; // This is the key name for S3. This is the file name for local file.
  string endpoint_id = 4;
  bool is_compressed = 5;
  bool is_encrypted = 6;
  string encryption_key = 7; 
}

// Etag / Part combination to finish a presigned multipart upload.
message PartETag {
  int64 part_number = 1;
  string etag = 2;
}

message InitMultipartUploadRequest {
  string path = 1;
}

message InitMultipartUploadResponse { string upload_id = 1; }

message FinishMultipartUploadRequest {
  string upload_id = 1;
  string path = 2;
  repeated PartETag part_etags = 3;
}

message FinishMultipartUploadResponse {}

message DeleteObjectRequest {
  Location location = 1;
}

message DeleteObjectResponse {}

message FinalizeObjectRequest {
  string object_id = 1; // This should be stored temporarily
  string collection_id = 2; // This should be stored temporarily
  Location location = 3; // This will be the final location of the object
  repeated aruna.api.storage.models.v1.Hash hashes = 4;
}

message FinalizeObjectResponse {}

message GetOrCreateEncryptionKeyRequest {
  string path = 1;
  string hash = 2;
  string endpoint_id = 3;
}

message GetOrCreateEncryptionKeyResponse {
  string encryption_key = 1;
  bool created = 2;
}

message GetOrCreateObjectByPathRequest {
  string path = 1;
  string access_key = 2;  // Validate if the user has correct permissions
  aruna.api.storage.services.v1.StageObject object = 3; // Will only be used if no staging object exists
}

message GetOrCreateObjectByPathResponse {
  string object_id = 1;
  string collection_id = 2;
  aruna.api.storage.models.v1.DataClass dataclass = 3;
  repeated aruna.api.storage.models.v1.Hash hashes = 4;
}


message GetObjectLocationRequest {
  string path = 1;
  string revision_id = 2;
  string access_key = 3;
  string endpoint_id = 4;
}

message GetObjectLocationResponse {
  aruna.api.storage.models.v1.Object object = 1;
  Location location = 2;
}

message GetCollectionByBucketRequest {
  string bucket = 1;
  string access_key = 2;
}

message GetCollectionByBucketResponse {
  string project_id = 1;
  string collection_id = 2;
}

