syntax = "proto3";

package aruna.api.notification.services.v2;
option go_package = "github.com/ArunaStorage/go-api/aruna/api/notification/services/v2";
option java_multiple_files = true;
option java_package = "com.github.ArunaStorage.java_api.aruna.api.notification.services.v2";
option java_outer_classname = "UpdateNotificationServices";

import "google/protobuf/timestamp.proto";
import "aruna/api/storage/models/v2/models.proto";



// EventNotificationService
//
// A service to receive events in the AOS storage
service EventNotificationService {

  // CreateStreamConsumer
  //
  // Creates a new event stream consumer.
  rpc CreateStreamConsumer(CreateStreamConsumerRequest)
      returns (CreateStreamConsumerResponse) {}

  // GetEventMessageBatch
  //
  // Reads a set of messages from a given stream group 
  // Each message contains a separate acknowledgement message thatis protected by a salt and an hmac for verification.
  // The message can be send directly through the AcknowledgeMessageBatch call to acknowledge the message.
  rpc GetEventMessageBatch(GetEventMessageBatchRequest) 
      returns (GetEventMessageBatchResponse) {}

  // GetEventMessageBatch
  //
  // Opens a stream which pushes each received notification individual and just-in-time.
  // Each message contains a separate acknowledgement message that is protected by a salt and an hmac for verification.
  // The message can be send directly through the AcknowledgeMessageBatch call to acknowledge the message.
  rpc GetEventMessageStream(GetEventMessageStreamRequest) 
      returns (stream GetEventMessageStreamResponse) {}

  // AcknowledgeMessageBatch
  //
  // List of messages to acknowledge
  // Each reply is protected by a salt and and hmac that verifies the message
  rpc AcknowledgeMessageBatch(AcknowledgeMessageBatchRequest) 
      returns (AcknowledgeMessageBatchResponse) {}

  // DeleteEventStreamingGroup
  //
  // Deletes an existing event stream consumer by ID.
  rpc DeleteStreamConsumer(DeleteStreamConsumerRequest)
      returns (DeleteStreamConsumerResponse) {}
}


message Resource {
  string resource_id = 1;
  bool persistent_resource_id = 2;
  string checksum = 3;
  storage.models.v2.ResourceVariant resource_variant = 4;
}

message ResourceTarget {
  string resource_id = 1;
  storage.models.v2.ResourceVariant resource_variant = 2;
}

message CreateStreamConsumerRequest {
  oneof target {
    ResourceTarget resource = 1;
    string user = 2;
    bool anouncements = 3;
    bool all = 4;
  }
  bool include_subresources = 5;
  oneof stream_type {
    StreamAll stream_all = 6;
    StreamFromDate stream_from_date = 7;
    StreamFromSequence stream_from_sequence = 8;
  };
}

message CreateStreamConsumerResponse { string stream_consumer = 1; }

message GetEventMessageBatchRequest {
  string stream_consumer = 1;
  uint32 batch_size = 2;
}

message GetEventMessageBatchResponse {
  repeated EventMessage messages = 1;
}

message GetEventMessageStreamRequest {
  string stream_consumer = 1;
}

message GetEventMessageStreamResponse {
  EventMessage messages = 1;
}

message AcknowledgeMessageBatchRequest {
  repeated Reply replies = 1;
}

message AcknowledgeMessageBatchResponse {}


message DeleteStreamConsumerRequest {
    string stream_consumer = 1;
}

message DeleteStreamConsumerResponse {}

message StreamFromSequence { uint64 sequence = 1; }

message StreamFromDate { google.protobuf.Timestamp timestamp = 1; }

message StreamAll {}

enum EventVariant {
  EVENT_VARIANT_UNSPECIFIED = 0;
  EVENT_VARIANT_CREATED = 1;
  EVENT_VARIANT_AVAILABLE = 2;
  EVENT_VARIANT_UPDATED = 3;
  EVENT_VARIANT_DELETED = 4;
}

message EventMessage {
  oneof message_variant {
    ResourceEvent resource_event = 1;
    UserEvent user_event = 2;
    AnouncementEvent announcement_event = 3;
  }
}

message ResourceEvent {
  Resource resource = 1;
  EventVariant event_variant = 2;
  Reply reply = 3;
}

message UserEvent {
  string user_id = 1;
  EventVariant event_variant = 2;
  string checksum = 3;
  Reply reply = 4;
}

message Reply {
  string reply = 1;
  string salt = 2;
  string hmac = 3;
}

message ScheduledDowntime {
  string location = 1;
  string component = 2;
  google.protobuf.Timestamp from = 3;
  google.protobuf.Timestamp to = 4;
}

message NewVersion {
  string location = 1;
  string component = 2;
  string new_version = 3;
}

message NewPubkey {
  string pubkey = 1;
}

message AnouncementEvent {
  oneof event_variant {
    string new_data_proxy_id = 1;
    string remove_data_proxy_id = 2;
    string update_data_proxy_id = 3;
    int32 new_pubkey = 4;
    int32 remove_pubkey = 5;
    ScheduledDowntime downtime = 6;
    NewVersion version = 7;
  }
  Reply reply = 8;
}