syntax = "proto3";

package aruna.api.notification.services.v2;
option go_package = "github.com/ArunaStorage/go-api/aruna/api/storage/services/v2";
option java_multiple_files = true;
option java_package = "com.github.ArunaStorage.java_api.aruna.api.storage.services.v2";
option java_outer_classname = "UpdateNotificationServices";

import "google/api/visibility.proto";
import "google/protobuf/timestamp.proto";
import "aruna/api/storage/models/v2/models.proto";



// EventNotificationService
//
// A service to receive events in the AOS storage
service EventNotificationService {

  option (google.api.api_visibility).restriction = "UNFINISHED";
  // CreateEventStreamingGroup
  //
  // Creates a new EventStreamingGroup
  rpc CreateEventStreamingGroup(CreateEventStreamingGroupRequest)
      returns (CreateEventStreamingGroupResponse) {}

  // GetEventMessageBatch
  //
  // Reads a set of messages from a given stream group
  // Each message contains a separate acknowledgement message that is protected by a salt and an hmac for verification
  // The message can be send directly through the AcknowledgeMessageBatch call to acknowledge the message
  rpc GetEventMessageBatch(GetEventMessageBatchRequest) 
      returns (GetEventMessageBatchResponse) {}

  // GetEventMessageBatch
  //
  // Reads a set of messages from a given stream group
  // Each message contains a separate acknowledgement message that is protected by a salt and an hmac for verification
  // The message can be send directly through the AcknowledgeMessageBatch call to acknowledge the message
  rpc GetEventMessageBatchStream(GetEventMessageBatchStreamRequest) 
      returns (stream GetEventMessageBatchStreamResponse) {}

  // AcknowledgeMessageBatch
  //
  // List of messages to acknowledge
  // Each reply is protected by a salt and and hmac that verifies the message
  rpc AcknowledgeMessageBatch(AcknowledgeMessageBatchRequest) 
      returns (AcknowledgeMessageBatchResponse) {}

  // DeleteEventStreamingGroup
  //
  // Deletes a existing EventStreamingGroup by ID
  rpc DeleteEventStreamingGroup(DeleteEventStreamingGroupRequest)
      returns (DeleteEventStreamingGroupResponse) {}
}

message CreateEventStreamingGroupRequest {
  aruna.api.storage.models.v2.ResourceType resource = 1;
  string resource_id = 2;
  bool include_subresource = 3;
  oneof stream_type {
    StreamAll stream_all = 4;
    StreamFromDate stream_from_date = 5;
    StreamFromSequence stream_from_sequence = 6;
  };
  EventStreamingGroupHierarchy hierarchy =  7;
}

message EventStreamingGroupHierarchy {
  string project_id = 1;
  string collection_id = 2;
  string object_id = 3;
  string object_group_id = 4;
}

message CreateEventStreamingGroupResponse { string stream_group_id = 1; }

message GetEventMessageBatchRequest {
  string stream_group_id = 1;
  uint32 batch_size = 2;
}

message GetEventMessageBatchResponse {
  repeated EventNotificationMessage messages = 1;
}

message GetEventMessageBatchStreamRequest {
  string stream_group_id = 1;
  uint32 batch_size = 2;
}

message GetEventMessageBatchStreamResponse {
  repeated EventNotificationMessage messages = 1;
}

message AcknowledgeMessageBatchRequest {
  repeated Reply replies = 1;
}

message AcknowledgeMessageBatchResponse {}


message DeleteEventStreamingGroupRequest {
    string stream_group_id = 1;
}

message DeleteEventStreamingGroupResponse {}

message StreamFromSequence { uint64 sequence = 1; }

message StreamFromDate { google.protobuf.Timestamp timestamp = 1; }

message StreamAll {}

message EventNotificationMessage {
  aruna.api.storage.models.v2.ResourceType resource = 1;
  string resource_id = 2;
  EventType updated_type = 3;
  Reply reply = 4;
}

message Reply {
  string reply = 1;
  string salt = 2;
  string hmac = 3;
}

enum EventType {
  EVENT_TYPE_UNSPECIFIED = 0;
  EVENT_TYPE_CREATED = 1;
  EVENT_TYPE_AVAILABLE = 2;
  EVENT_TYPE_UPDATED = 3;
  EVENT_TYPE_METADATA_UPDATED = 4;
  EVENT_TYPE_DELETED = 5;
  EVENT_TYPE_ALL = 6;
}


PROJECT > COLLECTION > DATASET > OBJECT
PROJECT > OBJECT