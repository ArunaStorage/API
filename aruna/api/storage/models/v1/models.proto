syntax = "proto3";
import "google/protobuf/timestamp.proto";
option go_package = "github.com/ArunaStorage/go-api/aruna/api/storage/models/v1";

package aruna.api.storage.models.v1;


message User {
  // Internal Aruna UserID
  string id = 1;
  // Oidc subject ID
  repeated string external_id = 2;
  // (optional) User display_name
  string display_name = 3;
  // Is the user activated
  bool active = 4;
  // User email (empty if service account)
  string email = 5;
  // User attributes
  UserAttributes attributes = 6;
}


message ResourcePermission {
  oneof resource_id {
    string project_id = 1;
    string collection_id = 2;
    string dataset_id = 3;
    string object_id = 4;
    bool personal = 5;
  }
  Permission permission = 6;
}


message Token {
  string id = 1;
  string name = 2;
  google.protobuf.Timestamp created_at = 3;
  google.protobuf.Timestamp expires_at = 4;
  ResourcePermission permission = 5;
  google.protobuf.Timestamp used_at = 6;
}


message CustomAttributes {
  string attribute_name = 1;
  string attribute_value = 2;
}

message GlobalAttributes {
  bool global_admin = 1;
  bool service_account = 2;
  repeated CustomAttributes custom_attributes = 3; // This is a placeholder for future additional attributes
}

message UserAttributes {
  GlobalAttributes attributes = 1;
  PersonalPermissions personal_perms = 2;
}

// Storage resource specific userpermissions
// Evaluated in Order -> 1: object_deny > 4: collection_permissions etc.
message PersonalPermissions {
  repeated ResourcePermission deny = 1;
  repeated ResourcePermission allow = 2;
}

message ProjectPermission {
  string user_id = 1;
  string project_id = 2;
  ResourcePermission permission = 3;
  bool service_account = 4;
}


enum KeyValueVariant {
  KEY_VALUE_VARIANT_UNSPECIFIED = 0;
  KEY_VALUE_VARIANT_LABEL = 1;
  KEY_VALUE_VARIANT_STATIC_LABEL = 2;
  KEY_VALUE_VARIANT_HOOK = 3;
}

// A key value pair for hooks and labels
message KeyValue {
  string key = 1;
  string value = 2;
  KeyValueVariant variant = 3;
  bool indexed = 4;
}

enum RelationVariant {
  RELATION_VARIANT_UNSPECIFIED = 0;
  RELATION_VARIANT_URL = 1;
  RELATION_VARIANT_IDENTIFIER = 2;
}

message ExternalRelation {
  string name = 1;
  string identifier = 2;
  RelationVariant variant = 3;
}



message PageRequest {
  string start_after = 1; // This is the last ID of the previous returned request
  int64 page_size = 2;  // Default to 20, -1 for all
}

// An resourcetype used to identify generic authorizations
enum ResourceType {
  RESOURCE_TYPE_UNSPECIFIED = 0;
  RESOURCE_TYPE_PROJECT = 1;
  RESOURCE_TYPE_COLLECTION = 2;
  RESOURCE_TYPE_OBJECT = 3;
  RESOURCE_TYPE_ALL = 4;
}

// Used for the internal associated services to validate permissions
// Actions are similar to HTTP verbs
enum ResourceAction {
  RESOURCE_ACTION_UNSPECIFIED = 0;
  RESOURCE_ACTION_CREATE = 1;
  RESOURCE_ACTION_APPEND = 2;
  RESOURCE_ACTION_UPDATE = 3;
  RESOURCE_ACTION_READ = 4;
  RESOURCE_ACTION_DELETE = 5;
}

// An arbitrary status for Objects
enum Status {
  STATUS_UNSPECIFIED = 0;
  STATUS_INITIALIZING = 1;
  STATUS_AVAILABLE = 2;
  STATUS_UNAVAILABLE = 3;
  STATUS_ERROR = 4;
  STATUS_DELETED = 5;
  STATUS_FINALIZING = 6;
}

enum EndpointStatus {
  ENDPOINT_STATUS_UNSPECIFIED = 0;
  ENDPOINT_STATUS_INITIALIZING = 1;
  ENDPOINT_STATUS_AVAILABLE = 2;
  ENDPOINT_STATUS_DEGRADED = 3;
  ENDPOINT_STATUS_UNAVAILABLE = 4;
  ENDPOINT_STATUS_MAINTENANCE = 5;
}

// Stats for a set of objects
message Stats {
  int64 count = 1;
  int64 acc_size = 2;
}

// Stats for a collection
message CollectionStats {
  Stats object_stats = 1;
  google.protobuf.Timestamp last_updated = 3;
}

// Semver version -> Alpha Beta release are not supported -> Use "latest" for
// mutable collections that are in development
message Version {
  int32 major = 1;
  int32 minor = 2;
  int32 patch = 3;
}

enum Hashalgorithm {
  HASHALGORITHM_UNSPECIFIED = 0;
  HASHALGORITHM_MD5 = 1;
  HASHALGORITHM_SHA256 = 2;
}

message Hash {
  Hashalgorithm alg = 1;
  string hash = 2;
}

// Dataclass defines the confidentiality of the object
enum DataClass {
  DATA_CLASS_UNSPECIFIED = 0;
  DATA_CLASS_PUBLIC = 1;
  DATA_CLASS_PRIVATE = 2;
  DATA_CLASS_CONFIDENTIAL = 3;
}

enum EndpointType {
  ENDPOINT_TYPE_UNSPECIFIED = 0;
  ENDPOINT_TYPE_S3 = 1;
  ENDPOINT_TYPE_FILE = 2;
}

enum EndpointHostType {
  ENDPOINT_HOST_TYPE_UNSPECIFIED = 0;
  ENDPOINT_HOST_TYPE_PROXY = 1;
  ENDPOINT_HOST_TYPE_INTERNAL = 2;
  ENDPOINT_HOST_TYPE_BUNDLER = 3;
}

message EndpointHostConfig {
  string url = 1;
  bool is_primary = 2;
  bool ssl = 3;
  bool public = 4;
  EndpointHostType host_type = 5;
}

message Endpoint {
  string id = 1;
  EndpointType ep_type = 2;
  string name = 3;
  string documentation_path = 6;
  bool is_public = 7;
  bool is_default = 8;
  EndpointStatus status = 9;
  bool is_bundler = 10;
  repeated EndpointHostConfig host_configs = 11;
}


// A first draft for possible relation types
// That should be introduced by us
enum RelationType {
  RELATION_TYPE_UNSPECIFIED = 0; // DO NOT USE
  RELATION_TYPE_CROSSREF = 1; // Crossref -> URL
  RELATION_TYPE_ORIGIN = 2; // Crossref -> Objectid
  RELATION_TYPE_METADATA = 3; // Data -> Metadata link
  RELATION_TYPE_SPECIFICATION = 4; // Specification for metadata etc.
  RELATION_TYPE_DATASET = 5; // Part of Dataset -> To "bundle", dataset objects
}

// A Link is a connection to other data,
// this can either be 
// A: An URL (DOI, crossref, etc.)
// B: Another Object 
message Link {
  oneof identifier {
    string object_id = 1;
    string url = 2;
    string custom_identifier = 3;
  }
}

message Relation {
  // A relation can be outbound or inbound
  // Most of the time relations are updated bidirectional
  oneof relation {
    Link describes = 1;
    Link described_by = 2; 
  }
  // Relation is either a custom string type, or a predefined type
  oneof relationtype { 
    RelationType relation_type = 3; 
    string custom_relation = 4;
  }
  string relation_id = 5; // Relations are revisioned and share a common ID to track whats changed
}

// RULES for Objects:
// 1.  Each object is "owned" by one/or more collections
// 2.  Objects can be "borrowed" to multiple other collections
// 3.  Objects are immutable, updating an object will create a new object with
// increased revision number
//     only people with modify permissions in the owner collection can update an
//     object
// 3.1 Special cases:
//     Hooks: Can be added/removed and modified without changing the object
//     revision number Labels: Can be added without changing the object revision
//     number, removing or modifying labels WILL change the object revision
//     number (append only) auto_update: Can be added/removed without changing
//     the object revision number and is collection specific
// 4.  Objects can only be permanently deleted by a person with admin rights on
// the owner collection

message Object {
  string id = 1;                    // ObjectID
  string filename = 2;              // Filename: Name of the original file e.g.: mydata.json
  repeated KeyValue labels = 3;     // Labels to additionally describe the object
  repeated KeyValue hooks = 4;      // Hooks to be executed on the object
  google.protobuf.Timestamp created = 5;
  int64 content_len = 6;            // Length of the stored dataset
  Status status = 7;
  repeated Relation relations = 8;  // Relations to other objects / external URLs -> Replaces Objectgroups
  DataClass data_class = 9;         // Confidentiality of the object
  repeated Hash hashes = 10;        // MD5 and SHA256 hash of the data
  int64 rev_number = 11;            // Increasing revion number for each update
  bool latest = 12;                 // Is this the latest version of the object?
}

// Multiple Objects
message Objects { repeated Object objects = 1; }

message FullObjectReference {
  Object object = 1;
  bool auto_update = 2;
  string path = 3;
}

message ObjectIdReference {
  string object_id = 1;
  bool auto_update = 2;
  string path = 3;
}

// RULES for Collections:
// 1. Each object is "owned" by one/or more collections
// 2. Objects can be in multiple collections and must be in the owner collection
// 3. Collections are either mutable with Version.latest == true or immutable
// with a fixed version number 3.1 If a collection gets a fixed version a copy
// is created with all "latest" objects dereferenced to their respective
// revisions 3.2 Modifying an immutable collection will create a new copy of the
// collection with a new version number
// 4. Collections can be created by any user, but only the owner can modify or
// delete them

message Collection {
  string id = 1;
  string name = 2;                            // Should be unique in authgroup
  string description = 3;
  repeated KeyValue labels = 4;
  repeated KeyValue hooks = 5;
  FullObjectReference label_policy = 6;                    // Policy file for label ontology
  google.protobuf.Timestamp created = 7;
  repeated FullObjectReference objects = 8;
  repeated FullObjectReference specifications = 9;
  oneof version {
    Version semantic_version = 12;
    bool latest = 13;
  }
  CollectionStats stats = 14;
  DataClass dataclass = 15;
}

// Multiple Collections
message Collections { repeated Collection collections = 1; }

// This is a representation of the Collection without the recursive nature of
// objectreferences
message CollectionOverview {
  string id = 1;
  string name = 2;
  string description = 3;
  repeated KeyValue labels = 4;
  repeated KeyValue hooks = 5;
  Object label_policy = 6;                    // Policy file for label ontology
  google.protobuf.Timestamp created = 7;
  oneof version {
    Version semantic_version = 12;
    bool latest = 13;
  }
  CollectionStats stats = 14;
  DataClass dataclass = 15;
}

// Multiple CollectionOverviews
message CollectionOverviews {
  repeated CollectionOverview collection_overviews = 1;
}

// This is a representation of the Collection with only Resource RevisionIDs
// instead of full objects
message CollectionWithId {
  string id = 1;
  string name = 2;                            // Should be unique in authgroup
  string description = 3;
  repeated KeyValue labels = 4;
  repeated KeyValue hooks = 5;
  ObjectIdReference label_policy = 6;                    // Policy file for label ontology
  google.protobuf.Timestamp created = 7;
  repeated ObjectIdReference objects = 8;
  repeated ObjectIdReference specifications = 9;
  oneof version {
    Version semantic_version = 12;
    bool latest = 13;
  }
  CollectionStats stats = 14;
  DataClass dataclass = 15;
}
// Multiple CollectionWithIDs
message CollectionWithIDs { repeated CollectionWithId collection_with_ids = 1; }


// A Project is a list of collections with associated users
// This is used to manage access to multiple collections at the same time
// Each Collection can only be in one Project at a time
message Project {
  string id = 1;
  string name = 2;
  // Project specific labels / hooks
  repeated storage.models.v1.KeyValue key_values = 3;
  // External relations (URLs / IDs from external sources)
  repeated storage.models.v1.ExternalRelation external_relations = 4;
  int64 size = 5;
  storage.models.v1.DataClass data_class = 6;
  google.protobuf.Timestamp created_at = 7;
  string created_by = 8; 
}

enum Permission {
  PERMISSION_UNSPECIFIED = 0;
  PERMISSION_NONE = 1; // No permissions granted, used for users that are in the
                       // project but have no default permissions
  PERMISSION_READ = 2; // Read only
  PERMISSION_APPEND = 3; // Append objects to the collection cannot modify existing objects
  PERMISSION_WRITE = 4; // Can Read/Append/Modify objects in the collection
                         // that owns the object / Create new collections
  PERMISSION_ADMIN = 5;  // Can modify the collections itself and permanently
                         // delete owned objects / move ownership of objects
}


