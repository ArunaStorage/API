syntax = "proto3";

package aruna.api.storage.services.v1;
option go_package = "github.com/ArunaStorage/go-api/aruna/api/storage/services/v1";
option java_multiple_files = true;
option java_package = "com.github.ArunaStorage.java_api.aruna.api.storage.services.v1";
option java_outer_classname = "CollectionService";
import "aruna/api/storage/models/v1/models.proto";
import "aruna/api/storage/models/v1/query.proto";
import "google/api/annotations.proto";

// CollectionService
//
// Contains all methods that get/create or update Collection and associated resources
service CollectionService {

  // CreateNewCollection
  //
  // Status: STABLE
  //
  // creates a new Collection
  rpc CreateNewCollection(CreateNewCollectionRequest)
      returns (CreateNewCollectionResponse) {
    option (google.api.http) = {
      post : "/v1/collection"
      body : "*"
    };
  }

  // GetCollectionByID
  //
  // Status: STABLE
  //
  // Queries a specific Collection by ID
  // The result can be one_of:
  // CollectionOverview -> default
  // CollectionWithID
  // Collection (full)
  // This can be modified with the optional OutputFormat parameter
  rpc GetCollectionByID(GetCollectionByIDRequest)
      returns (GetCollectionByIDResponse) {
    option (google.api.http) = {
      get : "/v1/collection/{collection_id}"
    };
  }

  // GetCollections
  //
  // Status: STABLE
  //
  // queries multiple collections by ID or by LabelFilter
  // This returns by default a paginated result with 20 entries.
  // Must specify a project_id as context
  rpc GetCollections(GetCollectionsRequest) returns (GetCollectionsResponse) {
    option (google.api.http) = {
      get : "/v1/collections/{project_id}"
    };
  }

  // UpdateCollection
  //
  // Status: STABLE
  //
  // Updates the current collection
  // This will update the collection in place if it is unversioned / latest
  // A versioned (pinned) collection requires a new semantic version after the
  // update This can be used to pin a collection to a specific version similar
  // to the PinCollectionVersion request
  rpc UpdateCollection(UpdateCollectionRequest)
      returns (UpdateCollectionResponse) {
    option (google.api.http) = {
      put : "/v1/collection/{collection_id}"
      body : "*"
    };
  }

  // PinCollectionVersion
  //
  // Status: STABLE
  //
  // This pins the current status of the version to a
  // specific version. Effectively creating a copy of the collection with a
  // stable version All objects will be pinned to an explicit revision number
  // Pinned collections can not be updated in place
  rpc PinCollectionVersion(PinCollectionVersionRequest)
      returns (PinCollectionVersionResponse) {
    option (google.api.http) = {
      post : "/v1/collection/{collection_id}/pin"
      body : "*"
    };
  }

  // DeleteCollection
  //
  // Status: STABLE
  //
  // This request deletes the collection.
  // If with_version is true, it deletes the collection and all its versions.
  // If cascade is true, all objects that are owned by the collection will also
  // deleted. This should be avoided
  rpc DeleteCollection(DeleteCollectionRequest)
      returns (DeleteCollectionResponse) {
    option (google.api.http) = {
      delete : "/v1/collection/{collection_id}"
      body : "*"
    };
  }

  // AddKeyValueToCollection
  //
  // Status: BETA
  //
  // Adds key values (labels / hooks) to a collection
  rpc AddKeyValuesToCollection(AddKeyValuesToCollectionRequest)
      returns (AddKeyValuesToCollectionResponse) {
    option (google.api.http) = {
      patch : "/v1/collection/{collection_id}/add_key_value"
      body : "*"
    };
  }
}


// WorkspaceService
//
// Service to manage "special" anonymous collections / workspaces 
service WorkspaceService {
  // CreateWorkspace
  //
  // Status: ALPHA
  //
  // A new request to create a personal anonymous workspace
  rpc CreateWorkspace(CreateWorkspaceRequest)
      returns (CreateWorkspaceResponse) {
    option (google.api.http) = {
      post : "/v1/workspace"
      body : "*"
    };
  }


  // DeleteWorkspace
  //
  // Status: ALPHA
  //
  // Delete a workspace
  rpc DeleteWorkspace(DeleteWorkspaceRequest)
      returns (DeleteWorkspaceResponse) {
    option (google.api.http) = {
      delete : "/v1/workspace/{workspace_id}"
      body : "*"
    };
  }

  // DeleteWorkspace
  //
  // Status: ALPHA
  //
  // Claims an anonymous workspace, and transfers the owner to a regular user account.
  rpc ClaimWorkspace(ClaimWorkspaceRequest)
      returns (ClaimWorkspaceResponse) {
    option (google.api.http) = {
      post : "/v1/workspace/{workspace_id}/claim"
      body : "*"
    };
  }

  // MoveWorkspaceData
  //
  // Status: ALPHA
  //
  // Claims an anonymous workspace
  rpc MoveWorkspaceData(MoveWorkspaceDataRequest)
      returns (MoveWorkspaceDataResponse) {
    option (google.api.http) = {
      post : "/v1/workspace/{workspace_id}/move/{collection_id}"
      body : "*"
    };
  }
}

// Models:

message CreateWorkspaceRequest {
  string project_name = 1;
}

message CreateWorkspaceResponse{
  string workspace_id = 1;
  string token = 2;
  string access_key = 3;
  string secret_key = 4;
}

message DeleteWorkspaceRequest {
  string workspace_id = 1;
}

message DeleteWorkspaceResponse {}

message ClaimWorkspaceRequest {
  // This can only be called by an registered user,
  // that is in possesion of the workspace_id and workspace token
  // It will remove the service account and claim all references "as" the user.
  string workspace_id = 1;
  string token = 2;
}

message ClaimWorkspaceResponse {}

message MoveWorkspaceDataRequest {
  string workspace_id = 1;
  string collection_id = 2;
}

message MoveWorkspaceDataResponse {}

message CreateNewCollectionRequest {
  // Collection name
  string name = 1;
  // Description
  string description = 2;
  // Project id
  string project_id = 3;
  // List of associated labels
  repeated storage.models.v1.KeyValue labels = 4;
  // List of associated hooks
  repeated storage.models.v1.KeyValue hooks = 5;
  // Optional Dataclass
  storage.models.v1.DataClass dataclass = 6;
}

message CreateNewCollectionResponse {
  // The new collection_id
  string collection_id = 1;
}

message GetCollectionByIDRequest {
  // Requested id
  string collection_id = 1;
}

message GetCollectionByIDResponse {
  // Overview of the requested collection
  storage.models.v1.CollectionOverview collection = 1;
}

message GetCollectionsRequest {
  // Project id
  string project_id = 1;
  // Pagination default 50
  string continuation_token = 2;
}

message GetCollectionsResponse {
  // List of collection overviews
  storage.models.v1.CollectionOverviews collections = 1;
  // Only included if more than 50 collections will be returned
  string continuation_token = 2;
}

// This updates the collection
// Updating a pinned collection will require a new version to be created
message UpdateCollectionRequest {
  // Old collection_id
  string collection_id = 2;
  // New name
  string name = 3;
  // New description
  string description = 4;
  // New list of labels
  repeated storage.models.v1.KeyValue labels = 5;
  // New list of hooks
  repeated storage.models.v1.KeyValue hooks = 6;

  // (optional) Policy (rego) file for label ontology -> must be valid object_id
  string label_policy_object = 7;

  // Optional update Dataclass, this will not overwrite
  // the dataclass of all existing associated objects
  // New objects can only have this dataclass
  storage.models.v1.DataClass dataclass = 8;

  // If this is set, the collection will be automatically pinned to this version
  // Similar to the more explicit Pin request
  // Updating a pinned collection will make this field required
  // (optional if unpinned || required if pinned)
  storage.models.v1.Version version = 9;
}

message UpdateCollectionResponse {
  // New collection overview
  storage.models.v1.CollectionOverview collection = 1;
}

message PinCollectionVersionRequest {
  // Old collection_id
  string collection_id = 1;
  // New version
  storage.models.v1.Version version = 2;
}

message PinCollectionVersionResponse {
  // New collection overview
  storage.models.v1.CollectionOverview collection = 1;
}

message DeleteCollectionRequest {
  // Collection id
  string collection_id = 1;
  // Force delete
  bool force = 2;
}

message DeleteCollectionResponse {}


message AddKeyValuesToCollectionRequest {
  string collection_id = 1;
  repeated storage.models.v1.KeyValue labels = 2;
  repeated storage.models.v1.KeyValue hooks = 3;
}

message AddKeyValuesToCollectionResponse {
  // New collection overview
  storage.models.v1.CollectionOverview collection = 1;
}