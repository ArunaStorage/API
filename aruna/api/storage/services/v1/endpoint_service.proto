syntax = "proto3";

package aruna.api.storage.services.v1;
option go_package = "github.com/ArunaStorage/go-api/aruna/api/storage/services/v1";
option java_multiple_files = true;
option java_package = "com.github.ArunaStorage.java_api.aruna.api.storage.services.v1";
option java_outer_classname = "EndpointService";

import "aruna/api/storage/models/v1/models.proto";

import "google/api/annotations.proto";

service EndpointService {

  // Registers a new Endpoint (Aruna DataProxy) to the server
  // Needs admin permissions

  rpc AddEndpoint(AddEndpointRequest) returns (AddEndpointResponse) {
    option (google.api.http) = {
      post : "/v1/endpoint"
      body : "*"
    };
  }

  // Gets an specific endpoint by ID or Name
  rpc GetEndpoint(GetEndpointRequest) returns (GetEndpointResponse) {
    option (google.api.http) = {
      get : "/v1/endpoint"
    };
  }

  // Gets all available endpoints
  rpc GetEndpoints(GetEndpointsRequest) returns (GetEndpointsResponse) {
    option (google.api.http) = {
      get : "/v1/endpoints"
    };
  }

  // Deletes a specific endpoint by id
  // This needs admin permissions
  rpc DeleteEndpoint(DeleteEndpointRequest) returns (DeleteEndpointResponse) {
    option (google.api.http) = {
      delete : "/v1/endpoint/{endpoint_id}"
    };
  }

  // This request returns the default endpoint for the current server
  // It may produce different results depending on the used server
  rpc GetDefaultEndpoint(GetDefaultEndpointRequest)
      returns (GetDefaultEndpointResponse) {
    option (google.api.http) = {
      get : "/v1/endpoint/default"
    };
  }
}

message AddEndpointRequest {
  string name = 1;
  storage.models.v1.EndpointType ep_type = 2;
  string proxy_hostname = 3;
  string internal_hostname = 4;
  string documentation_path = 5;
  bool is_public = 6;
}

message AddEndpointResponse { storage.models.v1.Endpoint endpoint = 1; }

message GetEndpointRequest {
  oneof endpoint {
    string endpoint_name = 1;
    string endpoint_id = 2;
  }
}

message GetEndpointResponse { storage.models.v1.Endpoint endpoint = 1; }

message GetEndpointsRequest {}

message GetEndpointsResponse {
  repeated storage.models.v1.Endpoint endpoints = 1;
}

message DeleteEndpointRequest { string endpoint_id = 1; }

message DeleteEndpointResponse {}

message GetDefaultEndpointRequest {}

message GetDefaultEndpointResponse { storage.models.v1.Endpoint endpoint = 1; }