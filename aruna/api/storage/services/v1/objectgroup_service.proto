syntax = "proto3";

package aruna.api.storage.services.v1;
option go_package = "github.com/ArunaStorage/go-api/aruna/api/storage/services/v1";
option java_multiple_files = true;
option java_package = "com.github.ArunaStorage.java_api.aruna.api.storage.services.v1";
option java_outer_classname = "ObjectGroupService";

import "aruna/api/storage/models/v1/models.proto";
import "aruna/api/storage/models/v1/query.proto";

import "google/api/annotations.proto";


// ObjectService
//
// Contains all methods that get/create or update Objects and associated resource
service ObjectGroupService {

  // CreateObjectGroup
  //
  // Status: STABLE
  // 
  // This creates a new ObjectGroup in the collection
  rpc CreateObjectGroup(CreateObjectGroupRequest)
      returns (CreateObjectGroupResponse) {
    option (google.api.http) = {
      post : "/v1/collection/{collection_id}/group"
      body : "*"
    };
  }

  // UpdateObjectGroup
  //
  // Status: STABLE
  //
  // This creates an updated ObjectGroup
  // ObjectGroups are immutable
  // Updating an ObjectGroup will create a new Revision of the ObjectGroup
  rpc UpdateObjectGroup(UpdateObjectGroupRequest)
      returns (UpdateObjectGroupResponse) {
    option (google.api.http) = {
      post : "/v1/collection/{collection_id}/group/{group_id}"
      body : "*"
    };
  }

  // GetObjectGroupById
  //
  // Status: STABLE
  // 
  // This gets a specific ObjectGroup by ID
  // By default the latest revision is always returned, older revisions need to
  // be specified separately
  rpc GetObjectGroupById(GetObjectGroupByIdRequest)
      returns (GetObjectGroupByIdResponse) {
    option (google.api.http) = {
      get : "/v1/collection/{collection_id}/group/{group_id}"
    };
  }

  // GetObjectGroupsFromObject
  //
  // Status: STABLE
  //
  // This gets all ObjectGroups associated to a specific
  // Object Objects can be part of multiple ObjectGroups at once
  rpc GetObjectGroupsFromObject(GetObjectGroupsFromObjectRequest)
      returns (GetObjectGroupsFromObjectResponse) {
    option (google.api.http) = {
      get : "/v1/collection/{collection_id}/object/{object_id}/groups"
    };
  }

  // GetObjectGroups
  //
  // Status: STABLE
  //
  // This is a request that returns a (paginated) list of
  // ObjectGroups that contain a specific set of labels.
  rpc GetObjectGroups(GetObjectGroupsRequest)
      returns (GetObjectGroupsResponse) {
    option (google.api.http) = {
      get : "/v1/collection/{collection_id}/groups"
    };
  }

  // GetObjectGroupHistory
  //
  // Status: BETA
  //
  // This requests a full history with all objectgroups
  // that are part of this objectgroups history
  rpc GetObjectGroupHistory(GetObjectGroupHistoryRequest)
      returns (GetObjectGroupHistoryResponse) {
    option (google.api.http) = {
      get : "/v1/collection/{collection_id}/group/{group_id}/history"
    };
  }

  // GetObjectGroupObjects
  //
  // Status: STABLE
  //
  // Requests a list of paginated objects associated with this
  // specific objectgroup
  rpc GetObjectGroupObjects(GetObjectGroupObjectsRequest)
      returns (GetObjectGroupObjectsResponse) {
    option (google.api.http) = {
      get : "/v1/collection/{collection_id}/group/{group_id}/objects"
    };
  }
  // DeleteObjectGroup
  //
  // Status: STABLE
  // 
  // This is a request that deletes a specified ObjectGroup
  // This does not delete the associated Objects
  rpc DeleteObjectGroup(DeleteObjectGroupRequest)
      returns (DeleteObjectGroupResponse) {
    option (google.api.http) = {
      delete : "/v1/collection/{collection_id}/group/{group_id}"
    };
  }
  // AddLabelsToObjectGroup 
  //
  // Status: STABLE
  //
  // This is a specific request to add new label(s)
  // to an existing object_group, in contrast to UpdateObjectGroup
  // this will not create a new revision for the specific object_group
  // Instead it will directly add the specified label(s) to the object_group
  rpc AddLabelsToObjectGroup(AddLabelsToObjectGroupRequest)
      returns (AddLabelsToObjectGroupResponse) {
    option (google.api.http) = {
      patch : "/v1/collection/{collection_id}/group/{group_id}/add_labels"
      body : "*"
    };
  }
}
// Models
// This section contains the models for each individual Request and
// corresponding Response

message CreateObjectGroupRequest {
  // ObjectGroup name
  string name = 1;
  // Description for group
  string description = 2;
  // Collection Id
  string collection_id = 3;
  // This is the reference to the Objects that should be added to the group
  repeated string object_ids = 4;
  // This is a reference to the Objects that are associated with "meta" data
  // about corresponding objects in the group
  repeated string meta_object_ids = 5;
  // List of label key-value pairs
  repeated storage.models.v1.KeyValue labels = 6;
  // List of hooks key-value pairs
  repeated storage.models.v1.KeyValue hooks = 7;
}

message CreateObjectGroupResponse {
  // Overview of the new objectgroup
  storage.models.v1.ObjectGroupOverview object_group = 1;
}

message UpdateObjectGroupRequest {
  // Old group id
  string group_id = 1;
  // New name
  string name = 2;
  // New description
  string description = 3;
  // Collection id
  string collection_id = 4;
  // This is the reference to the Objects that should be added to the group
  repeated string object_ids = 5;
  // This is a reference to the Objects that are associated with "meta" data
  // about corresponding objects in the group
  repeated string meta_object_ids = 6;
  // List of label key-value pairs
  repeated storage.models.v1.KeyValue labels = 7;
  // List of hooks key-value pairs
  repeated storage.models.v1.KeyValue hooks = 8;
}

message UpdateObjectGroupResponse {
  // Overview of the updated objectgroup
  storage.models.v1.ObjectGroupOverview object_group = 1;
}

message GetObjectGroupByIdRequest {
  // Object group id
  string group_id = 1;
  // Collection id
  string collection_id = 2;
}

message GetObjectGroupByIdResponse {
  // Overview of the objectgroup
  storage.models.v1.ObjectGroupOverview object_group = 1;
}

message GetObjectGroupsFromObjectRequest {
  // Object id
  string object_id = 1;
  // Collection id
  string collection_id = 2;
  // Page request
  storage.models.v1.PageRequest page_request = 3;
}

message GetObjectGroupsFromObjectResponse {
  // Overviews of multiple objectgroups
  storage.models.v1.ObjectGroupOverviews object_groups = 1;
}

message DeleteObjectGroupRequest {
  // Objectgroup id
  string group_id = 1;
  // Collection id
  string collection_id = 2;
  // with revisions
  bool with_revisions = 3;
}

message DeleteObjectGroupResponse {}

message GetObjectGroupsRequest {
  // Collection id
  string collection_id = 1;
  // Paginate the results: Default is 20
  storage.models.v1.PageRequest page_request = 2;
  // Filter by Labels (optional) OR request a specific list of ObjectGroups
  storage.models.v1.LabelOrIDQuery label_id_filter = 3;
}

message GetObjectGroupsResponse {
  // Overviews of multiple objectgroups
  storage.models.v1.ObjectGroupOverviews object_groups = 1;
}

message GetObjectGroupHistoryRequest {
  // Collection id
  string collection_id = 1;
  // Objectgroup id
  string group_id = 2;
  // Pagerequest
  storage.models.v1.PageRequest page_request = 3;
}

message GetObjectGroupHistoryResponse {
  // Overviews of multiple objectgroups
  storage.models.v1.ObjectGroupOverviews object_groups = 1;
}

message GetObjectGroupObjectsRequest {
  // Collection id
  string collection_id = 1;
  // Objectgroup id
  string group_id = 2;
  // Pagerequest
  storage.models.v1.PageRequest page_request = 3;
  // Include meta objects only
  bool meta_only = 4; // Should only the "meta" objects be returned
}

// Objectgroup objects are a combination of "object" and the boolean is_metadata
// flag Returned as single list to allow for more precise queries
message ObjectGroupObject {
  // Object
  storage.models.v1.Object object = 1;
  // Is this objet a meta object
  bool is_metadata = 2;
}

message GetObjectGroupObjectsResponse {
  // List of associated object group objects
  repeated ObjectGroupObject object_group_objects = 1;
}

message AddLabelsToObjectGroupRequest {
  // Collection id
  string collection_id = 1;
  // ObjectGroup id 
  string group_id = 2;
  // List of labels that should be added to the list of labels
  repeated storage.models.v1.KeyValue labels_to_add = 3;
}

message AddLabelsToObjectGroupResponse {
  // Returns the updated ObjectGroup
  storage.models.v1.ObjectGroupOverview object_group = 1;
}