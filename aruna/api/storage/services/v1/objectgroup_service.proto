syntax = "proto3";

package aruna.api.storage.services.v1;
option go_package = "github.com/ArunaStorage/go-api/aruna/api/storage/services/v1";
option java_multiple_files = true;
option java_package = "com.github.ArunaStorage.java_api.aruna.api.storage.services.v1";
option java_outer_classname = "ObjectGroupService";

import "aruna/api/storage/models/v1/models.proto";
import "aruna/api/storage/models/v1/auth.proto";
import "google/api/annotations.proto";


// This service is tightly coupled with the collection service
// Objectgroups are bound to collections and are only revisioned in the collection
// Therefore the http paths for the underlying collections are used for the objectgroup

service ObjectGroupService {

    // This creates a new ObjectGroup in the collection
    rpc CreateObjectGroup(CreateObjectGroupRequest) returns (CreateObjectGroupResponse) {
        option (google.api.http) = {
            post: "/v1/collection/{collection_id}/group"
            body: "*"
        };
    }

    // ObjectGroups are immutable
    // Updating an ObjectGroup will create a new Revision of the ObjectGroup
    rpc UpdateObjectGroup(UpdateObjectGroupRequest) returns (UpdateObjectGroupResponse) {
        option (google.api.http) = {
            put: "/v1/collection/{collection_id}/group/{group_id}"
            body: "*"
        };
    }

    rpc GetObjectGroupById(GetObjectGroupByIdRequest) returns (GetObjectGroupByIdResponse) {
        option (google.api.http) = {
            get: "/v1/collection/{collection_id}/group/{group_id}"
        };
    }

    rpc GetObjectGroupsFromObject(GetObjectGroupsFromObjectRequest) returns (GetObjectGroupsFromObjectResponse) {
        option (google.api.http) = {
            get: "/v1/collection/{collection_id}/group/{group_id}"
        };
    }

    // This method will borrow an objectgroup (and all referenced objects) to another collection.
    // This can only be used if all objects from the group are owned by the current collection.
    // Borrowed objects are references and cannot be updated directly.
    // Updating a borrowed objectgroup will clone the objectgroup and create a copy in the new collection.
    // This copy will not receive any updates from the original objectgroup.
    // This owner can delete the object even if it was cloned
    rpc BorrowObjectGroup(BorrowObjectGroupRequest) returns (BorrowObjectGroupResponse){
        option (google.api.http) = {
            post: "/v1/collection/{collection_id}/group/{id}/borrow/{target_collection_id}"
            body: "*"
        };
    }


}


// Models

message CreateObjectGroupRequest {
    string name = 1;
    string description = 2;
    string collection_id = 3;
    repeated storage.models.v1.Object objects = 4; // This is the reference to the Objects that should be added to the group
    repeated storage.models.v1.Object meta_objects = 5; // This is a reference to the Objects that are associated with "meta" data about corresponding objects in the group
    repeated storage.models.v1.KeyValue labels = 6;
    repeated storage.models.v1.KeyValue hooks = 7;
}

message CreateObjectGroupResponse{
    string object_group_id = 1;
}

message UpdateObjectGroupRequest {
    string group_id = 1;
    string name = 2;
    string description = 3;
    string collection_id = 4;
    repeated storage.models.v1.Object objects = 5; // This is the reference to the Objects that should be added to the group
    repeated storage.models.v1.Object meta_objects = 6; // This is a reference to the Objects that are associated with "meta" data about corresponding objects in the group
    repeated storage.models.v1.KeyValue labels = 7;
    repeated storage.models.v1.KeyValue hooks = 8;
}

message UpdateObjectGroupResponse{
    storage.models.v1.ObjectGroup object_group = 1;
}

message GetObjectGroupByIdRequest {
    string group_id = 1;
    string collection_id = 2;
    // Optional revision
    int64 revision = 3;
}

message GetObjectGroupByIdResponse{
    storage.models.v1.ObjectGroup object_group = 1;
}

message GetObjectGroupsFromObjectRequest{
    string object_id = 1;
    string collection_id = 2;
}

message GetObjectGroupsFromObjectResponse{
    repeated storage.models.v1.ObjectGroup object_groups = 1;
}

message BorrowObjectGroupRequest{
    string id = 1;
    string collection_id = 2;
    string target_collection_id = 3;
}

message BorrowObjectGroupResponse{}

