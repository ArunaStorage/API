syntax = "proto3";

package aruna.api.storage.services.v1;
option go_package = "github.com/ArunaStorage/go-api/aruna/api/storage/services/v1";
option java_multiple_files = true;
option java_package = "com.github.ArunaStorage.java_api.aruna.api.storage.services.v1";
option java_outer_classname = "ObjectService";

import "aruna/api/storage/models/v1/models.proto";
import "aruna/api/storage/models/v1/query.proto";

import "google/api/annotations.proto";

// ObjectService
//
// Contains all methods that get/create or update Objects and associated resources
service ObjectService {

  // InitializeNewObject
  //
  // Status: STABLE
  //
  // This initializes a new object
  // Initializing an object will put it in a staging area.
  // Staged objects will get a separate staging id and need to be finished
  // before they can be used.
  rpc InitializeNewObject(InitializeNewObjectRequest)
      returns (InitializeNewObjectResponse) {
    option (google.api.http) = {
      post : "/v1/collection/{collection_id}/object"
      body : "*"
    };
  }

  // GetUploadURL
  //
  // Status: STABLE
  //
  // This method will return a (multi-part) url that can be used to upload a
  // file to S3. Part is a optional query parameter that can be used to upload a
  // part of the file / multipart upload.
  rpc GetUploadURL(GetUploadURLRequest) returns (GetUploadURLResponse) {
    option (google.api.http) = {
      get : "/v1/collection/{collection_id}/object/{object_id}/staging/"
            "{upload_id}/upload"
    };
  }

  // GetDownloadUrl
  //
  // Status: STABLE
  // 
  // This method will return a url that can be used to download a file from S3.
  rpc GetDownloadURL(GetDownloadURLRequest) returns (GetDownloadURLResponse) {
    option (google.api.http) = {
      get : "/v1/collection/{collection_id}/object/{object_id}/download"
    };
  }

  // GetDownloadLinksBatch
  //
  // Status: BETA
  //
  // This method can be used to get download urls for multiple objects.
  // The order of the returned urls will be the same as the order of the object
  // ids in the request.
  rpc GetDownloadLinksBatch(GetDownloadLinksBatchRequest)
      returns (GetDownloadLinksBatchResponse) {
    option (google.api.http) = {
      get : "/v1/collection/{collection_id}/objects/batch"
    };
  }

  // CreateDownloadLinksStream
  //
  // Status: BETA
  //
  // Creates a stream of objects and presigned links based on the provided query
  // This can be used retrieve a large number of Objects as a stream that would
  // otherwise cause issues with the connection
  rpc CreateDownloadLinksStream(CreateDownloadLinksStreamRequest)
      returns (stream CreateDownloadLinksStreamResponse) {
    option (google.api.http) = {
      post : "/v1/collection/{collection_id}/objects/stream"
      body : "*"
    };
  }

  // FinishObjectStaging
  //
  // Status: STABLE
  //
  // This method completes the staging of an object.
  rpc FinishObjectStaging(FinishObjectStagingRequest)
      returns (FinishObjectStagingResponse) {
    option (google.api.http) = {
      patch : "/v1/collection/{collection_id}/object/{object_id}/staging/"
             "{upload_id}/finish"
      body : "*"
    };
  }

  // UpdateObject
  //
  // Status: STABLE
  //
  // Objects are immutable!
  // Updating an object will create a new revision for the object
  // This method will put the new revision in a staging area.
  // Staged objects will get a separate staging id and need to be finished
  // before they can be used.
  rpc UpdateObject(UpdateObjectRequest) returns (UpdateObjectResponse) {
    option (google.api.http) = {
      post : "/v1/collection/{collection_id}/object/{object_id}/update"
      body : "*"
    };
  }

  // CreateObjectReference
  //
  // Status: STABLE
  //
  // Creates a new reference of this object in another collection
  rpc CreateObjectReference(CreateObjectReferenceRequest)
      returns (CreateObjectReferenceResponse) {
    option (google.api.http) = {
      post : "/v1/collection/{collection_id}/object/{object_id}/reference/"
             "{target_collection_id}"
      body : "*"
    };
  }

  // CloneObject 
  //
  // Status: STABLE
  //
  // This method clones an object and creates a copy in the same collection.
  // This copy has a new id and revision and will not receive any updates from
  // the original object.
  rpc CloneObject(CloneObjectRequest) returns (CloneObjectResponse) {
    option (google.api.http) = {
      post : "/v1/collection/{collection_id}/object/{object_id}/clone"
      body : "*"
    };
  }

  // DeleteObject 
  //
  // Status: STABLE
  //
  // Deletes the object with the complete revision history.
  rpc DeleteObject(DeleteObjectRequest) returns (DeleteObjectResponse) {
    option (google.api.http) = {
      delete : "/v1/collection/{collection_id}/object/{object_id}"
      body : "*"
    };
  }


  // DeleteObjects
  //
  // Status: STABLE
  //
  // Deletes multiple objects at once.
  rpc DeleteObjects(DeleteObjectsRequest) returns (DeleteObjectsResponse) {
    option (google.api.http) = {
      delete : "/v1/collection/{collection_id}/objects"
      body : "*"
    };
  }
 
  // GetObjectByID 
  //
  // Status: STABLE
  // 
  // gets a specific Object by ID that is associated to the
  // current collection By default only the latest revision of an object will be
  // returned Specify a revision_number to select an older revision With the
  // optional with_url boolean a download link can automatically be requested
  rpc GetObjectByID(GetObjectByIDRequest) returns (GetObjectByIDResponse) {
    option (google.api.http) = {
      get : "/v1/collection/{collection_id}/object/{object_id}"
    };
  }

  // GetObjects
  //
  // Status: STABLE
  //
  // GetObjects returns a (paginated) list of objects in a specific collection
  // By default only the latest revisions of all objects will be shown
  // This behaviour can be changed with the include_history flag
  // With the optional with_url boolean a download link can automatically be
  // requested for each Object This request contains a LabelOrIDQuery message,
  // this is either a list of request ObjectIDs or a query filtered by Labels
  rpc GetObjects(GetObjectsRequest) returns (GetObjectsResponse) {
    option (google.api.http) = {
      get : "/v1/collection/{collection_id}/objects"
    };
  }

  // GetObjectRevisions
  //
  // Status: STABLE
  //
  // This returns the full list of revisions of a specified object
  // With the optional with_url boolean a download link can automatically be
  // requested for each Object This is by default a paginated request
  rpc GetObjectRevisions(GetObjectRevisionsRequest)
      returns (GetObjectRevisionsResponse) {
    option (google.api.http) = {
      get : "/v1/collection/{collection_id}/object/{object_id}/revisions"
    };
  }
  // GetLatestObjectRevision
  //
  // Status: STABLE
  //
  // This returns the latest revision of a specific object
  // The returned `latest` object will have a different id if the current
  // object is not the latest revision
  rpc GetLatestObjectRevision(GetLatestObjectRevisionRequest)
      returns (GetLatestObjectRevisionResponse) {
    option (google.api.http) = {
      get : "/v1/collection/{collection_id}/object/{object_id}/latest"
    };
  }

  // GetObjectEndpoints
  //
  // Status: BETA
  //
  // This returns a list of endpoints
  // One endpoint will be the "default" endpoint
  rpc GetObjectEndpoints(GetObjectEndpointsRequest)
      returns (GetObjectEndpointsResponse) {
    option (google.api.http) = {
      get : "/v1/collection/{collection_id}/object/{object_id}/endpoints"
    };
  }
  // AddLabelsToObject 
  //
  // Status: STABLE
  //
  // This is a specific request to add new label(s)
  // to an existing object, in contrast to UpdateObject
  // this will not create a new object in the staging area
  // Instead it will directly add the specified label(s) to the object
  rpc AddLabelsToObject(AddLabelsToObjectRequest)
      returns (AddLabelsToObjectResponse) {
    option (google.api.http) = {
      patch : "/v1/collection/{collection_id}/object/{object_id}/add_labels"
      body : "*"
    };
  }
  // SetHooksOfObject
  //
  // Status: BETA
  // 
  // This is a specific request to update the complete list
  // of hooks for a specific object. This will not update the object
  // and create a new id, instead it will overwrite all hooks of the existing
  // object.
  rpc SetHooksOfObject(SetHooksOfObjectRequest)
      returns (SetHooksOfObjectResponse) {
    option (google.api.http) = {
      patch : "/v1/collection/{collection_id}/object/{object_id}/set_hooks"
      body : "*"
    };
  }

  // GetReferences
  //
  // Status: STABLE
  //
  // Get a list of references for this object (optional) including all revisions
  rpc GetReferences(GetReferencesRequest) returns (GetReferencesResponse) {
    option (google.api.http) = {
      get : "/v1/collection/{collection_id}/object/{object_id}/references"
    };
  }

  // GetObjectPath
  //
  // Status: BETA
  //
  // Get all object_paths for this object in a specific collection
  // !! Paths are collection specific !!
  rpc GetObjectPath(GetObjectPathRequest) returns (GetObjectPathResponse) {
    option (google.api.http) = {
      get : "/v1/collection/{collection_id}/object/{object_id}/path"
    };
  }
  
  // GetObjectPaths
  //
  // Status: BETA
  //
  // Get all object_paths for a specific collection
  // !! Paths are collection specific !!
  rpc GetObjectPaths(GetObjectPathsRequest) returns (GetObjectPathsResponse) {
    option (google.api.http) = {
      get : "/v1/collection/{collection_id}/paths"
    };
  }
  
  // CreateObjectPath
  //
  // Status: BETA
  //
  // Create collection_specific object_paths for an object
  // !! Paths are collection specific !!
  rpc CreateObjectPath(CreateObjectPathRequest) returns (CreateObjectPathResponse) {
    option (google.api.http) = {
      post : "/v1/collection/{collection_id}/object/{object_id}/path"
      body: "*"
    };
  }

  // SetObjectPathVisibility
  //
  // Status: BETA
  //
  // Updates the visibility setting for an object_path (hide/unhide)
  // !! Paths are collection specific !!
  rpc SetObjectPathVisibility(SetObjectPathVisibilityRequest) returns (SetObjectPathVisibilityResponse) {
    option (google.api.http) = {
      patch : "/v1/collection/{collection_id}/path/{path=**}/visibility"
      body: "*"
    };
  }

  // GetObjectsByPath
  //
  // Status: BETA
  //
  // Gets a specific object by object_path
  // !! Paths are collection specific !!
  rpc GetObjectsByPath(GetObjectsByPathRequest) returns (GetObjectsByPathResponse) {
    option (google.api.http) = {
      get : "/v1/path/object/{path=**}"
    };
  }

  // GetProjectCollectionIdsByPath
  //
  // Status: BETA
  //
  // Gets a specific project and collection_id by object_path
  // !! Paths are collection specific !!
  rpc GetProjectCollectionIdsByPath(GetProjectCollectionIdsByPathRequest) returns (GetProjectCollectionIdsByPathResponse) {
    option (google.api.http) = {
      get : "/v1/path/collection/{path=**}"
    };
  }

  // GetObjectsAsListV2
  //
  // Status: ALPHA
  //
  // Gets a list of objects represented similar to a S3 ListObjectsV2 request
  // !! Paths are collection specific !!
  rpc GetObjectsAsListV2(GetObjectsAsListV2Request) returns (GetObjectsAsListV2Response) {
    option (google.api.http) = {
      get : "/v1/path/objects/listv2"
    };
  }


}

// Models
// These are the models for the above described requests and responses.
// gRPC best practises advice each Request and Response message in a RPC to be
// called {rpc_name}Request and {rpc_name}Response.

message URL {
  // URL response
  string url = 1;
}

message StageObject {
  
  reserved 2, 3;
  
  // Filename
  string filename = 1;

  // Removed fields:
  // string description = 2;
  // string collection_id = 3;

  // Content length
  int64 content_len = 4;
  // Source of the object (e.g. wikipedia)
  storage.models.v1.Source source = 5;
  // Dataclass public / private
  storage.models.v1.DataClass dataclass = 6;
  // List of label key-values
  repeated storage.models.v1.KeyValue labels = 7;
  // List of hook key-values
  repeated storage.models.v1.KeyValue hooks = 8;
  // (collection specific) sub_path for file
  // does not include file-, collection- or projectname
  // final fully-qualified schema: /<projectname>/<collectionname>/<path>/<filename>
  string sub_path = 9;
}

message InitializeNewObjectRequest {
  // This describes the object to be initialized.
  StageObject object = 1;
  // Collection id of the collection to which the object will be added.
  string collection_id = 2;
  // (optional) Used to specify a preferred endpoint by id
  // this can be used to specify which endpoint this object should use
  // only needed if it is not the default endpoint for the current server
  // instance
  string preferred_endpoint_id = 4;
  // Should the object be uploaded via multipart?
  bool multipart = 5;
  // Is specification ?
  // Should this object contain a specification for the collection ?
  bool is_specification = 6;
  // (optional) Hash 
  storage.models.v1.Hash hash = 7;
}

message InitializeNewObjectResponse {
  // ObjectId
  string object_id = 1;
  // Upload ID, a ID used to identify the upload / staging object
  string upload_id = 2;
  // CollectionID
  string collection_id = 3;
}

message GetUploadURLRequest {
  // ObjectId
  string object_id = 1;
  // Upload ID, a ID used to identify the upload / staging object
  string upload_id = 2;
  // CollectionID
  string collection_id = 3;
  // Is this a multipart upload?
  bool multipart = 4;
  // (optional) if multi was initialized
  int32 part_number = 5;
}

message GetUploadURLResponse {
  // URL
  URL url = 1;
}

message CompletedParts {
  // Multipart identifier
  string etag = 1;
  // Part number
  int64 part = 2;
}

message GetDownloadURLRequest {
  // Collection id
  string collection_id = 1;
  // Object id
  string object_id = 2;
}

message GetDownloadURLResponse {
  // URL
  URL url = 1;
}

message GetDownloadLinksBatchRequest {
  // CollectionID
  string collection_id = 1;
  // ObjectIds
  repeated string objects = 2;
}

message GetDownloadLinksBatchResponse {
  // List of URLs
  repeated URL urls = 1;
}

message CreateDownloadLinksStreamRequest {
  // CollectionID
  string collection_id = 1;
  // ObjectIds
  repeated string objects = 2;
}

message CreateDownloadLinksStreamResponse { URL url = 1; }

message FinishObjectStagingRequest {
  // ObjectId
  string object_id = 1;
  // Always the S3 upload_id
  string upload_id = 2;
  // CollectionID
  string collection_id = 3;
  // Hash of the uploaded data - used to verify the data integrity.
  // This supports multiple hashing algorithms.
  storage.models.v1.Hash hash = 4;

  // If the staging object had no uploads
  // Use this argument to skip the finish upload request
  bool no_upload = 5;

  // If the upload was multipart, this is the list of parts that were uploaded.
  // Should be empty if the upload was not multipart.
  // (optional)
  repeated CompletedParts completed_parts = 6;

  // Should the object be auto-updated in the collection?
  // default: false
  bool auto_update = 7;
}

message FinishObjectStagingResponse {
  // (new) Object overview
  storage.models.v1.Object object = 1;
}

message UpdateObjectRequest {
  reserved 8;
  // Existing object ID
  string object_id = 1;
  // collection ID
  string collection_id = 2;
  // New object data
  StageObject object = 3;
  // Should new data be uploaded ?
  bool reupload = 4;
  // If this is an reupload a preferred endpoint
  // can be specified by id
  string preferred_endpoint_id = 5;
  // Should a multipart upload be used?
  bool multi_part = 6;
  // Is specification ?
  // Should this object contain a specification for the collection ?
  bool is_specification = 7;
  // (optional) Hash 
  storage.models.v1.Hash hash = 9;
}

message UpdateObjectResponse {
  // ObjectId
  string object_id = 1;
  // Staging ID, a generic ID when multipart is not enabled, otherwise the
  // multipart upload ID.
  string staging_id = 2;
  // CollectionID
  string collection_id = 3;
}

message CreateObjectReferenceRequest {
  // ObjectId
  string object_id = 1;
  // OwnerCollectionID
  string collection_id = 2;
  // BorrowerCollectionID
  string target_collection_id = 3;
  // Should the other collection have permissions to edit the ressource
  bool writeable = 4;
  // Should the borrowed ressource be automatically updated ?
  bool auto_update = 5;
  // (collection specific) sub_path for file
  // does not include file-, collection- or projectname
  // final schema: /<projectname>/<collectionname>/<version>/<path>/<filename>
  string sub_path = 6;
}

message CreateObjectReferenceResponse {}

message CloneObjectRequest {
  // ObjectId
  string object_id = 1;
  // From CollectionID
  string collection_id = 2;
  // Target CollectionID
  string target_collection_id = 3;
}

message CloneObjectResponse {
  // This describes the new object.
  storage.models.v1.Object object = 1;
}

message DeleteObjectRequest {
  // ObjectId
  string object_id = 1;
  // CollectionID
  string collection_id = 2;
  // Delete including revisions
  bool with_revisions = 3;
  // Force delete including revisions
  bool force = 4;
}

message DeleteObjectResponse {}

message DeleteObjectsRequest {
  // Multiple ObjectIds
  repeated string object_ids = 1;
  // CollectionID
  string collection_id = 2;
  // Delete including revisions
  bool with_revisions = 3;
  // Force delete including revisions
  bool force = 4;
}

message DeleteObjectsResponse {}

message ObjectWithURL {
  // Description of a specified object
  storage.models.v1.Object object = 1;
  // This is a associated download URL
  // Will be empty if request does not contain the associated with_url flag
  string url = 2;
  // collection specific paths of object
  repeated string paths = 3;
}

message GetObjectByIDRequest {
  // Collection Id
  string collection_id = 1;
  // Object Id
  string object_id = 2;
  // With URL: Include URL in response ?
  bool with_url = 4;
}

message GetObjectByIDResponse { ObjectWithURL object = 1; }

message GetObjectsRequest {
  // Collection id
  string collection_id = 1;
  // Paginate the results: Default is 20
  storage.models.v1.PageRequest page_request = 2;
  // Filter by Labels (optional) OR request a specific list of Objects
  storage.models.v1.LabelOrIDQuery label_id_filter = 3;
  // With URL: Include URL in response ?
  bool with_url = 4;
}

message GetObjectsResponse {
  // A List of objects with (optional) associated URLs
  repeated ObjectWithURL objects = 1;
}

message GetObjectRevisionsRequest {
  // Collection id
  string collection_id = 1;
  // Object id
  string object_id = 2;
  // Pagination info
  storage.models.v1.PageRequest page_request = 3;
  // Should the response include download urls ?
  bool with_url = 4;
}

message GetObjectRevisionsResponse {
  // List of objects with (optional) URLs
  repeated ObjectWithURL objects = 1;
}

message GetLatestObjectRevisionRequest {
  // Collection id
  string collection_id = 1;
  // Object id
  string object_id = 2;
  // Should the response include download urls ?
  bool with_url = 3;
}

message GetLatestObjectRevisionResponse {
  // The object with the latest revision
  ObjectWithURL object = 1;
}

message GetObjectEndpointsRequest {
  // Collection id
  string collection_id = 1;
  // Object id
  string object_id = 2;
}

message GetObjectEndpointsResponse {
  // List of endpoints
  repeated storage.models.v1.Endpoint endpoints = 1;
}

message AddLabelsToObjectRequest {
  // Collection id
  string collection_id = 1;
  // Object id 
  string object_id = 2;
  // List of labels that should be added to the list of labels
  repeated storage.models.v1.KeyValue labels_to_add = 3;
}

message AddLabelsToObjectResponse {
  // Returns the updated Object
  storage.models.v1.Object object = 1;
}

message SetHooksOfObjectRequest {
  // Collection id
  string collection_id = 1;
  // Object id
  string object_id = 2;
  // This will overwrite all existing hooks
  // Can be empty to remove all hooks
  repeated storage.models.v1.KeyValue hooks = 3;
}

message SetHooksOfObjectResponse {
  // Returns the updated Object
  storage.models.v1.Object object = 1;
}

message GetReferencesRequest {
  // Collection id
  string collection_id = 1;
  // Object id
  string object_id = 2;
  // Should all revisions be included?
  bool with_revisions = 3;
}

message ObjectReference {
  // Object id
  string object_id = 1;
  // Collection id
  string collection_id = 2;
  // Specific revision number
  int64 revision_number = 3;
  // Is the writeable?
  bool is_writeable = 4;
}

message GetReferencesResponse {
  // List of object references
  repeated ObjectReference references = 1;
}

message Path {
  string path = 1;
  bool visibility = 2;
}

message GetObjectPathRequest {
  string collection_id = 1;
  string object_id = 2;
  bool include_inactive = 3;
}

message GetObjectPathResponse {
  repeated Path object_paths = 1;
}

message GetObjectPathsRequest {
  string collection_id = 1;
  bool include_inactive = 2;
}

message GetObjectPathsResponse {
  repeated Path object_paths = 1;
}

message CreateObjectPathRequest {
  string collection_id = 1;
  string object_id = 2;
  string sub_path = 3; // Subpath not full path
}

message CreateObjectPathResponse {
  Path path = 1;
}

message SetObjectPathVisibilityRequest {
  string collection_id = 1;
  string path = 2;
  bool visibility = 3;
}

message SetObjectPathVisibilityResponse {
  Path path = 1;
}

message GetObjectsByPathRequest {
  string path = 1;
  bool with_revisions = 2;
}

message GetProjectCollectionIdsByPathRequest {
  string path = 1;
}

message GetProjectCollectionIdsByPathResponse {
  string project_id = 1;
  string collection_id = 2;
}

message GetObjectsByPathResponse {
  repeated storage.models.v1.Object object = 3;
}


message GetObjectsAsListV2Request {
  // Required 
  string bucket = 1;
  optional string continuation_token = 2;
  optional string delimiter = 3;
  optional uint32 max_keys = 4;
  optional string prefix = 5;
  optional string start_after = 6;
}

message CommonPrefix {
  string prefix = 1;
}

message GetObjectsAsListV2Response {
  string name = 1;
  bool is_truncated = 2;
  uint32 max_keys = 4;
  uint32 key_count = 5;
  repeated storage.models.v1.Object contents = 6;
  repeated CommonPrefix prefixes = 7;
  optional string next_continuation_token = 8;
}



