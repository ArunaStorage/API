syntax = "proto3";

package aruna.api.storage.services.v1;
option go_package = "github.com/ArunaStorage/go-api/aruna/api/storage/services/v1";
option java_multiple_files = true;
option java_package = "com.github.ArunaStorage.java_api.aruna.api.storage.services.v1";
option java_outer_classname = "ObjectService";

import "aruna/api/storage/models/v1/models.proto";
import "google/api/annotations.proto";


service ObjectService {


    // This initializes a new object
    // Initializing an object will put it in a staging area.
    // Staged objects will get a separate staging id and need to be finished before they can be used.
    rpc InitializeNewObject(ObjectInitRequest) returns (StagingObject){
        option (google.api.http) = {
            post: "/v1/object"
            body: "*"
        };
    }

    // S3 url service
    // This method will return a url that can be used to upload a file to S3.
    rpc GetUploadURLSingle(GetSingleUrl) returns (URL){
        option (google.api.http) = {
            get: "/v1/object/{id}/staging/{staging_id}/upload"
        };
    }

    // This method will return a (multi-part) url that can be used to upload a file to S3.
    rpc GetUploadURLMulti(GetMultiUrl) returns (URL){
        option (google.api.http) = {
            get: "/v1/object/{id}/staging/{staging_id}/upload_multi/{part_number}"
        };
    }

    // This method will return a url that can be used to download a file from S3.
    rpc GetDownloadURL(GetDownloadUrl) returns (URL){
        option (google.api.http) = {
            get: "/v1/object/{id}/download"
        };
    }


    // This method can be used to get download urls for multiple objects.
    // The order of the returned urls will be the same as the order of the object ids in the request.
    rpc CreateDownloadLinkBatch(GetDownloadBatch) returns (URLList) {
        option (google.api.http) = {
            post: "/v1/objects"
            body: "*"
        };
    }

    // Creates a stream of objects and presigned links based on the provided query
    // This can be used retrieve a large number of Objects as a stream that would otherwise cause issues with the connection
    rpc CreateDownloadLinkStream(GetDownloadBatch) returns (stream URL) {
         option (google.api.http) = {
             post: "/v1/objects/stream"
             body: "*"
         };
    }




    // This method completes the staging of an object.
    rpc FinishObjectStaging(FinishRequest) returns (storage.models.v1.Object){
        option (google.api.http) = {
            post: "/v1/object/{id}/staging/{staging_id}/finish"
            body: "*"
        };
    }

    // Objects are immutable!
    // Updating an object will create a new revision for the object
    // This method will put the new revision in a staging area.
    // Staged objects will get a separate staging id and need to be finished before they can be used.
    rpc UpdateObject(ObjectUpdateRequest) returns (StagingObject){
        option (google.api.http) = {
            post: "/v1/object/{id}/update"
            body: "*"
        };
    }

}

// Models:

message URL {
    string url = 1;
}

message URLList {
    repeated URL urls = 1;
}

message InitObject {
    string filename = 1;
    string description = 2;
    string collection_id = 3;
    int64 content_len = 4;
    repeated storage.models.v1.KeyValue labels = 5;
    repeated storage.models.v1.KeyValue hooks = 6;
}

message ObjectInitRequest {
    // This describes the object to be initialized.
    InitObject object = 1;
    // Should the object be uploaded via multipart?
    bool multipart = 2;
}

message StagingObject {
    // ObjectId 
    string id = 1;
    // Staging ID, a generic ID when multipart is not enabled, otherwise the multipart upload ID.
    string staging_id = 2;
    // CollectionID
    string collection_id = 3;
}

message GetSingleUrl {
    // ObjectId 
    string id = 1;
    // Staging ID, a generic ID when multipart is not enabled, otherwise the multipart upload ID.
    string staging_id = 2;
    // CollectionID
    string collection_id = 3;
}

message GetMultiUrl {
    // ObjectId 
    string id = 1;
    // Staging ID, a generic ID when multipart is not enabled, otherwise the multipart upload ID.
    string staging_id = 2;
    // CollectionID
    string collection_id = 3;
    // Part number
    int32 part_number = 4;
}


message CompletedParts {
    // Multipart identifier
    string etag = 1;
    // Part number
    int64 part = 2;
}


message ObjectRevision {
    // ObjectId
    string id = 1;
    // (optional) revision number, will be latest if not set.
    int64 revision = 2;
}

message GetDownloadUrl {
    string collection_id = 1;
    ObjectRevision object = 2;
}


message GetDownloadBatch {
    // CollectionID
    string collection_id = 1;
    // ObjectIds
    repeated ObjectRevision objects = 2;
}


message FinishRequest {
    // ObjectId 
    string id = 1;
    // Staging ID, a generic ID when multipart is not enabled, otherwise the multipart upload ID.
    string staging_id = 2;
    // CollectionID
    string collection_id = 3;
    // Hash of the uploaded data - used to verify the data integrity.
    // This supports multiple hashing algorithms.
    storage.models.v1.Hash hash = 4;

    // If the upload was multipart, this is the list of parts that were uploaded.
    // Should be empty if the upload was not multipart.
    // (optional)
    repeated CompletedParts completed_parts = 5;

    // Should the object be auto-updated in the owner collection?
    // default: false
    bool auto_update = 6;

    // Add the object automatically to these collections
    // (optional)
    repeated string collection_ids = 7;
}

message ObjectUpdateRequest {
    // Existing object ID
    string id = 1;
    // New object data
    InitObject object = 2;
    // Should new data be uploaded ?
    bool reupload = 3;
    // Should a multipart upload be used?
    bool multi_part = 4;
}