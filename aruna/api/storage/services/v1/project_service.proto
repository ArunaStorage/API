syntax = "proto3";

package aruna.api.storage.services.v1;
option go_package = "github.com/ArunaStorage/go-api/aruna/api/storage/services/v1";
option java_multiple_files = true;
option java_package = "com.github.ArunaStorage.java_api.aruna.api.storage.services.v1";
option java_outer_classname = "ProjectService";

import "aruna/api/storage/models/v1/models.proto";
import "aruna/api/storage/models/v1/auth.proto";
import "aruna/api/storage/models/v1/query.proto";

import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
	info: {
		title: "Aruna Object Storage (AOS) REST API";
		version: "0.5.0-alpha.1"
	};
	// Overwriting host entry breaks tests, so this is not done here.
	schemes: HTTPS;
	schemes: HTTP;
	consumes: "application/json";
	produces: "application/json";
	security_definitions: {
		security: {
			key: "AccessKeyAuth";
			value: {
				type: TYPE_API_KEY;
				in: IN_HEADER;
				name: "Authorization";
        description: "Authentication token, prefixed by Bearer: Bearer <token>"
			}
		}
	}
	security: {
		security_requirement: {
			key: "AccessKeyAuth";
			value: {}
		}
	}
	responses: {
		key: "401";
		value: {
			description: "Returned when the user does not have permission to access the resource.";
		}
	}
	responses: {
		key: "404";
		value: {
			description: "Returned when the resource does not exist.";
			schema: {
				json_schema: {
					type: STRING;
				}
			}
		}
	}
  };

service ProjectService {

  // This creates a new authorization group.option
  // All users and collections are bundled in a authorization group.
  rpc CreateProject(CreateProjectRequest) returns (CreateProjectResponse) {
    option (google.api.http) = {
      post : "/v1/project"
      body : "*"
    };
  }

  // AddUserToProject Adds a new user to a given project by its id
  rpc AddUserToProject(AddUserToProjectRequest)
      returns (AddUserToProjectResponse) {
    option (google.api.http) = {
      post : "/v1/project/{project_id}/adduser"
      body : "*"
    };
  }

  // GetProjectCollections Returns all collections that belong to a certain
  // project
  rpc GetProjectCollections(GetProjectCollectionsRequest)
      returns (GetProjectCollectionsResponse) {
    option (google.api.http) = {
      get : "/v1/project/{project_id}/collections"
    };
  }

  // GetProject Returns the specified project
  rpc GetProject(GetProjectRequest) returns (GetProjectResponse) {
    option (google.api.http) = {
      get : "/v1/project/{project_id}"
    };
  }

  // Destroys the project and all its associated data. Must be empty
  // (cannot contain any collections).
  rpc DestroyProject(DestroyProjectRequest) returns (DestroyProjectResponse) {
    option (google.api.http) = {
      delete : "/v1/project/{project_id}"
    };
  }

  // Updates the project. All (meta) data will be overwritten.
  rpc UpdateProject(UpdateProjectRequest) returns (UpdateProjectResponse) {
    option (google.api.http) = {
      put : "/v1/project/{project_id}"
    };
  }

  // Removes a specified user from the project.
  rpc RemoveUserFromProject(RemoveUserFromProjectRequest)
      returns (RemoveUserFromProjectResponse) {
    option (google.api.http) = {
      post : "/v1/project/{project_id}/remove_user"
    };
  }

  // Get the user_permission of a specific user for the project.
  rpc GetUserPermissionsForProject(GetUserPermissionsForProjectRequest)
      returns (GetUserPermissionsForProjectResponse) {
    option (google.api.http) = {
      post : "/v1/project/{project_id}/get_user"
    };
  }

  // Edit the user_permission of a specific user for the project.
  rpc EditUserPermissionsForProject(EditUserPermissionsForProjectRequest)
      returns (EditUserPermissionsForProjectResponse) {
    option (google.api.http) = {
      post : "/v1/project/{project_id}/edit_user"
    };
  }
}

message CreateProjectRequest {
  string name = 1;
  string description = 2;
}

message CreateProjectResponse { string project_id = 1; }

message AddUserToProjectRequest {
  // The id of the project to add the user to
  string project_id = 1;
  storage.models.v1.ProjectPermission user_permission = 3;
}

message AddUserToProjectResponse {}

message GetProjectCollectionsRequest {
  // The id of the project to get the collections for
  string project_id = 1;
  storage.models.v1.PageRequest page_request = 2;
}

message GetProjectCollectionsResponse {
  repeated storage.models.v1.CollectionOverview collection = 1;
}

message GetProjectRequest {
  // The id of the project to get
  string project_id = 1;
}

message GetProjectResponse { storage.models.v1.ProjectOverview project = 1; }

message DestroyProjectRequest {
  // The id of the project to destroy
  string project_id = 1;
}

message DestroyProjectResponse {}

message UpdateProjectRequest {
  string project_id = 1;
  // Updated name
  string name = 2;
  // Update description
  string description = 3;
}

message UpdateProjectResponse { storage.models.v1.ProjectOverview project = 1; }

message RemoveUserFromProjectRequest {
  string project_id = 1;
  string user_id = 2;
}

message RemoveUserFromProjectResponse {}

message GetUserPermissionsForProjectRequest {
  string project_id = 1;
  string user_id = 2;
}

message GetUserPermissionsForProjectResponse {
  storage.models.v1.ProjectPermission user_permission = 1;
}

message EditUserPermissionsForProjectRequest {
  string project_id = 1;
  // This contains the user_id and the "new permission"
  storage.models.v1.ProjectPermission user_permission = 2;
}

message EditUserPermissionsForProjectResponse {}