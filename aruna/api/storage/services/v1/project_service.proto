syntax = "proto3";

package aruna.api.storage.services.v1;
option go_package = "github.com/ArunaStorage/go-api/aruna/api/storage/services/v1";
option java_multiple_files = true;
option java_package = "com.github.ArunaStorage.java_api.aruna.api.storage.services.v1";
option java_outer_classname = "ProjectService";

import "aruna/api/storage/models/v1/models.proto";

import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
	info: {
		title: "Aruna Object Storage (AOS) REST API";
		version: "1.1.0-rc.8"
	};
	// Overwriting host entry breaks tests, so this is not done here.
	schemes: HTTPS;
	consumes: "application/json";
	produces: "application/json";
	security_definitions: {
		security: {
			key: "AccessKeyAuth";
			value: {
				type: TYPE_API_KEY;
				in: IN_HEADER;
				name: "Authorization";
        description: "Authentication token, prefixed by Bearer: Bearer <token>"
			}
		}
	}
	security: {
		security_requirement: {
			key: "AccessKeyAuth";
			value: {}
		}
	}
};


// ProjectService
//
// Contains all methods that get/create or update Projects and associated resources
service ProjectService {

  // CreateProject
  //
  // Status: STABLE
  //
  // Creates a new project all users and collections are bundled in a project.
  rpc CreateProject(CreateProjectRequest) returns (CreateProjectResponse) {
    option (google.api.http) = {
      post : "/v1/project"
      body : "*"
    };
  }

  // AddUserToProject
  //
  // Status: STABLE
  // 
  // Adds a new user to a given project by its id
  rpc AddUserToProject(AddUserToProjectRequest)
      returns (AddUserToProjectResponse) {
    option (google.api.http) = {
      post : "/v1/project/{project_id}/add_user"
      body : "*"
    };
  }

  // GetProject
  //
  // Status: STABLE
  // 
  // Requests a project by id
  rpc GetProject(GetProjectRequest) returns (GetProjectResponse) {
    option (google.api.http) = {
      get : "/v1/project/{project_id}"
    };
  }

  // GetProjects
  //
  // Status: STABLE
  // 
  // Admin request to get all projects
  rpc GetProjects(GetProjectsRequest) returns (GetProjectsResponse) {
    option (google.api.http) = {
      get : "/v1/projects"
    };
  }

  // DeleteProject
  //
  // Status: STABLE
  //
  // Deletes the project and all its associated data. Must be empty!
  rpc DeleteProject(DeleteProjectRequest) returns (DeleteProjectResponse) {
    option (google.api.http) = {
      delete : "/v1/project/{project_id}"
    };
  }

  // UpdateProjectName
  //
  // Status: BETA
  //
  // Updates the project name. All (meta) data will be overwritten.
  rpc UpdateProjectName(UpdateProjectNameRequest) returns (UpdateProjectNameResponse) {
    option (google.api.http) = {
      patch : "/v2/project/{project_id}/name"
    };
  }

  // UpdateProjectKeyValues
  //
  // Status: BETA
  //
  // Updates the project name. All (meta) data will be overwritten.
  rpc UpdateProjectKeyValues(UpdateProjectKeyValuesRequest) returns (UpdateProjectKeyValueResponse) {
    option (google.api.http) = {
      patch : "/v2/project/{project_id}/key_values"
    };
  }
  
  // UpdateProjectExternalRelations
  //
  // Status: BETA
  //
  // Updates the project name. All (meta) data will be overwritten.
  rpc UpdateProjectExternalRelations(UpdateProjectExternalRelationsRequest) returns (UpdateProjectExternalRelationsResponse) {
    option (google.api.http) = {
      patch : "/v2/project/{project_id}/external_relations"
    };
  }

  // UpdateProjectDataClass
  //
  // Status: BETA
  //
  // Updates the project name. All (meta) data will be overwritten.
  rpc UpdateProjectDataClass(UpdateProjectDataClassRequest) returns (UpdateProjectDataClassResponse) {
    option (google.api.http) = {
      patch : "/v2/project/{project_id}/data_class"
    };
  }


  // RemoveUserFromProject
  //
  // Status: STABLE
  //
  // Removes a specified user from the project.
  rpc RemoveUserFromProject(RemoveUserFromProjectRequest)
      returns (RemoveUserFromProjectResponse) {
    option (google.api.http) = {
      delete : "/v1/project/{project_id}/remove_user"
    };
  }

  // GetUserPermissionsForProject
  //
  // Status: STABLE
  // 
  // Get the user_permission of a specific user for the project.
  rpc GetUserPermissionsForProject(GetUserPermissionsForProjectRequest)
      returns (GetUserPermissionsForProjectResponse) {
    option (google.api.http) = {
      get : "/v1/project/{project_id}/get_user"
    };
  }


  // GetAllUserPermissionsForProject
  //
  // Status: ALPHA
  // 
  // Get the user_permission of a specific user for the project.
  rpc GetAllUserPermissionsForProject(GetAllUserPermissionsForProjectRequest)
      returns (GetAllUserPermissionsForProjectResponse) {
    option (google.api.http) = {
      get : "/v1/project/{project_id}/get_users"
    };
  }


  // EditUserPermissionsForProject
  //
  // Status: STABLE
  //
  // Modifies the user_permission of a specific user for the project.
  rpc EditUserPermissionsForProject(EditUserPermissionsForProjectRequest)
      returns (EditUserPermissionsForProjectResponse) {
    option (google.api.http) = {
      patch : "/v1/project/{project_id}/edit_user"
      body : "*"
    };
  }
}

message CreateProjectRequest {
  // Project name
  string name = 1;
  // Project specific labels / hooks
  repeated storage.models.v1.KeyValue key_values = 2;
  // External relations (URLs / IDs from external sources)
  repeated storage.models.v1.ExternalRelation external_relations = 3;
  // DataClass
  storage.models.v1.DataClass data_class = 4;
}

message CreateProjectResponse {
  // The freshly created project_id 
  string project_id = 1; 
}

message AddUserToProjectRequest {
  string project_id = 1;
  string user_id = 2;
  storage.models.v1.Permission permission = 3;
}

message AddUserToProjectResponse {
  storage.models.v1.ProjectPermission permission = 4;
}

message GetProjectRequest {
  // The id of the project to get
  string project_id = 1;
}

message GetProjectResponse {
  // Overview of the projectroject
  storage.models.v1.Project project = 1;
}

message GetProjectsRequest {}

message GetProjectsResponse {
  // Overview of the projects
  repeated storage.models.v1.Project projects = 1;
}


message DeleteProjectRequest {
  // The id of the project to destroy
  string project_id = 1;
}

message DeleteProjectResponse {}




message UpdateProjectRequest {
  // Project id to update
  string project_id = 1;
  // Update description
  string description = 2;
  // Project binary flag(s)
  int64 flag = 3;
}

message UpdateProjectResponse {
  // Updated project overview 
  storage.models.v1.ProjectOverview project = 1;
}

message RemoveUserFromProjectRequest {
  // Project id
  string project_id = 1;
  // User that should be removed
  string user_id = 2;
}

message RemoveUserFromProjectResponse {}

message GetUserPermissionsForProjectRequest {
  // Project id
  string project_id = 1;
  // User id
  string user_id = 2;
}

message GetUserPermissionsForProjectResponse {
  // Userpermission for a specific user
  storage.models.v1.ProjectPermissionDisplayName user_permission = 1;
}

message EditUserPermissionsForProjectRequest {
  // Project id
  string project_id = 1;
  // This contains the user_id and the "new permission"
  storage.models.v1.ProjectPermission user_permission = 2;
}

message EditUserPermissionsForProjectResponse {}

message UserWithProjectPermissions {
  storage.models.v1.User user = 1;
  storage.models.v1.ProjectPermission user_permissions = 2;
}

message GetAllUserPermissionsForProjectRequest {
    // Project id
    string project_id = 1;
}

message GetAllUserPermissionsForProjectResponse {
    repeated UserWithProjectPermissions users = 1;
}