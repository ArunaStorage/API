syntax = "proto3";

package aruna.api.storage.services.v1;
option go_package = "github.com/ArunaStorage/go-api/aruna/api/storage/services/v1";
option java_multiple_files = true;
option java_package = "com.github.ArunaStorage.java_api.aruna.api.storage.services.v1";
option java_outer_classname = "AuthService";

import "aruna/api/storage/models/v1/models.proto";
import "aruna/api/storage/models/v1/auth.proto";
import "aruna/api/storage/models/v1/query.proto";

import "google/api/annotations.proto";


service AuthService {
    

    // This creates a new authorization group.option
    // All users and collections are bundled in a authorization group.
    rpc CreateProject (CreateProjectRequest) returns (CreateProjectResponse) {
        option (google.api.http) = {
            post: "/v1/project"
            body: "*"
        };
    }

    //AddUserToProject Adds a new user to a given project by its id
    rpc AddUserToProject (AddUserToProjectRequest) returns (AddUserToProjectResponse) {
        option (google.api.http) = {
            post: "/v1/project/{id}/adduser"
            body: "*"
        };
    }

	//CreateAPIToken Creates an API token to authenticate
    rpc CreateAPIToken(CreateAPITokenRequest) returns (CreateAPITokenResponse) {
        option (google.api.http) = {
            post: "/v1/project/{id}/user/{user_id}/apitoken"
            body: "*"
        };
    }

    //GetProjectCollections Returns all collections that belong to a certain project
    rpc GetProjectCollections(GetProjectCollectionsRequest) returns (GetProjectCollectionsResponse) {
        option (google.api.http) = {
            get: "/v1/project/{id}/collections"
        };
    }

    //GetUserCollections Returns all collections that a specified user has access to
    rpc GetUserCollections(GetUserCollectionsRequest) returns (GetUserCollectionsResponse) {
        option (google.api.http) = {
            get: "/v1/project/{id}/user/{user_id}/collections"
        };
    }

	//GetProject Returns the specified project
    rpc GetProject(GetProjectRequest) returns (GetProjectResponse) {
        option (google.api.http) = {
            get: "/v1/project/{id}"
        };
    }

	// Returns all API token for a specific user
    rpc GetAPITokens(GetAPITokensRequest) returns (GetAPITokensResponse) {
        option (google.api.http) = {
            get: "/v1/project/{id}/user/{user_id}/token"
        };
    }

	//DeleteAPITokenRequest Deletes the specified API Token
    rpc DeleteAPIToken(DeleteAPITokenRequest) returns (DeleteAPITokenResponse) {
        option (google.api.http) = {
            delete: "/v1/project/{id}/user/{user_id}/token/{token_id}"
        };
    }

    // This will destroy the project and all its associated data.
    // including users, collections, and API tokens and all data associated with them.
    rpc DestroyProject(DestroyProjectRequest) returns (DestroyProjectResponse) {
        option (google.api.http) = {
            delete: "/v1/project/{id}"
        };
    }
}


message CreateProjectRequest{
    string name = 1;
    string description = 2;
}

message CreateProjectResponse{
    string id = 1;
}

message AddUserToProjectRequest{
    // The id of the project to add the user to
    string id = 1;
    storage.models.v1.ProjectPermission user_permission = 3; 
}

message AddUserToProjectResponse{}

message CreateAPITokenRequest{
    // The id of the project to create the token for
    string id = 1;
    string user_id = 2;
    storage.models.v1.TokenType token_type = 3;

    // Empty if token_type is personal, otherwise the id of the collection to create the token for
    repeated string collection_ids = 4;
    storage.models.v1.Permission permission = 5;
}

message CreateAPITokenResponse{
    storage.models.v1.Token token = 1;
}

message GetProjectCollectionsRequest{
    // The id of the project to get the collections for
    string id = 1;
    storage.models.v1.PageRequest page_request = 2;
}

message GetProjectCollectionsResponse{
    repeated storage.models.v1.CollectionOverview collection = 1;
}

message GetUserCollectionsRequest{
    // The id of the project to get the collections for
    string id = 1;
    string user_id = 2;
    storage.models.v1.PageRequest page_request = 3;
}

message GetUserCollectionsResponse{
    repeated storage.models.v1.CollectionOverview collection = 1;
}

message GetProjectRequest{
    // The id of the project to get
    string id = 1;
}

message GetProjectResponse{
    storage.models.v1.ProjectOverview project = 1;
}

message GetAPITokensRequest{
    // The id of the project to get the API tokens for
    string id = 1;
    string user_id = 2;
    storage.models.v1.PageRequest page_request = 3;
}

message GetAPITokensResponse{
    // List of API tokens with redacted actual token
    repeated storage.models.v1.Token token = 1;
}

message DeleteAPITokenRequest{
    // The id of the project to delete the API token for
    string id = 1;
    string user_id = 2;
    string token_id = 3;
}

message DeleteAPITokenResponse{}

message DestroyProjectRequest{
    // The id of the project to destroy
    string id = 1;
}

message DestroyProjectResponse{}
