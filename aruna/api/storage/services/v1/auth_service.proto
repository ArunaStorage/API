syntax = "proto3";

package aruna.api.storage.services.v1;
option go_package = "github.com/ArunaStorage/go-api/aruna/api/storage/services/v1";
option java_multiple_files = true;
option java_package = "com.github.ArunaStorage.java_api.aruna.api.storage.services.v1";
option java_outer_classname = "AuthService";

import "aruna/api/storage/models/v1/models.proto";
import "aruna/api/storage/models/v1/auth.proto";
import "aruna/api/storage/models/v1/query.proto";

import "google/api/annotations.proto";


service AuthService {
    

    // This creates a new authorization group.option
    // All users and collections are bundled in a authorization group.
    rpc CreateAuthGroup (CreateAuthGroupRequest) returns (CreateAuthGroupResponse) {
        option (google.api.http) = {
            post: "/v1/authgroup"
            body: "*"
        };
    }

    //AddUserToAuthGroup Adds a new user to a given authgroup by its id
    rpc AddUserToAuthGroup (AddUserToAuthGroupRequest) returns (AddUserToAuthGroupResponse) {
        option (google.api.http) = {
            post: "/v1/authgroup/{id}/adduser"
            body: "*"
        };
    }

	//CreateAPIToken Creates an API token to authenticate
    rpc CreateAPIToken(CreateAPITokenRequest) returns (CreateAPITokenResponse) {
        option (google.api.http) = {
            post: "/v1/authgroup/{id}/user/{user_id}/apitoken"
            body: "*"
        };
    }

    //GetAuthGroupCollections Returns all collections that belong to a certain authgroup
    rpc GetAuthGroupCollections(GetAuthGroupCollectionsRequest) returns (GetAuthGroupCollectionsResponse) {
        option (google.api.http) = {
            get: "/v1/authgroup/{id}/collections"
        };
    }

    //GetUserCollections Returns all collections that a specified user has access to
    rpc GetUserCollections(GetUserCollectionsRequest) returns (GetUserCollectionsResponse) {
        option (google.api.http) = {
            get: "/v1/authgroup/{id}/user/{user_id}/collections"
        };
    }

	//GetAuthGroup Returns the specified authgroup
    rpc GetAuthGroup(GetAuthGroupRequest) returns (GetAuthGroupResponse) {
        option (google.api.http) = {
            get: "/v1/authgroup/{id}"
        };
    }

	// Returns all API token for a specific user
    rpc GetAPITokens(GetAPITokensRequest) returns (GetAPITokensResponse) {
        option (google.api.http) = {
            get: "/v1/authgroup/{id}/user/{user_id}/token"
        };
    }

	//DeleteAPITokenRequest Deletes the specified API Token
    rpc DeleteAPIToken(DeleteAPITokenRequest) returns (DeleteAPITokenResponse) {
        option (google.api.http) = {
            delete: "/v1/authgroup/{id}/user/{user_id}/token/{token_id}"
        };
    }

    // This will destroy the authgroup and all its associated data.
    // including users, collections, and API tokens and all data associated with them.
    rpc DestroyAuthGroup(DestroyAuthGroupRequest) returns (DestroyAuthGroupResponse) {
        option (google.api.http) = {
            delete: "/v1/authgroup/{id}"
        };
    }
}


message CreateAuthGroupRequest{
    string name = 1;
    string description = 2;
}

message CreateAuthGroupResponse{
    string id = 1;
}

message AddUserToAuthGroupRequest{
    // The id of the authgroup to add the user to
    string id = 1;
    storage.models.v1.AuthGroupPermission user_permission = 3; 
}

message AddUserToAuthGroupResponse{}

message CreateAPITokenRequest{
    // The id of the authgroup to create the token for
    string id = 1;
    string user_id = 2;
    storage.models.v1.TokenType token_type = 3;

    // Empty if token_type is personal, otherwise the id of the collection to create the token for
    repeated string collection_ids = 4;
    storage.models.v1.Permission permission = 5;
}

message CreateAPITokenResponse{
    storage.models.v1.Token token = 1;
}

message GetAuthGroupCollectionsRequest{
    // The id of the authgroup to get the collections for
    string id = 1;
    storage.models.v1.PageRequest page_request = 2;
}

message GetAuthGroupCollectionsResponse{
    repeated storage.models.v1.CollectionOverview collection = 1;
}

message GetUserCollectionsRequest{
    // The id of the authgroup to get the collections for
    string id = 1;
    string user_id = 2;
    storage.models.v1.PageRequest page_request = 3;
}

message GetUserCollectionsResponse{
    repeated storage.models.v1.CollectionOverview collection = 1;
}

message GetAuthGroupRequest{
    // The id of the authgroup to get
    string id = 1;
}

message GetAuthGroupResponse{
    storage.models.v1.AuthGroupOverview authgroup = 1;
}

message GetAPITokensRequest{
    // The id of the authgroup to get the API tokens for
    string id = 1;
    string user_id = 2;
    storage.models.v1.PageRequest page_request = 3;
}

message GetAPITokensResponse{
    // List of API tokens with redacted actual token
    repeated storage.models.v1.Token token = 1;
}

message DeleteAPITokenRequest{
    // The id of the authgroup to delete the API token for
    string id = 1;
    string user_id = 2;
    string token_id = 3;
}

message DeleteAPITokenResponse{}

message DestroyAuthGroupRequest{
    // The id of the authgroup to destroy
    string id = 1;
}

message DestroyAuthGroupResponse{}
