syntax = "proto3";

package aruna.api.storage.services.v1;
option go_package = "github.com/ArunaStorage/go-api/aruna/api/storage/services/v1";
option java_multiple_files = true;
option java_package = "com.github.ArunaStorage.java_api.aruna.api.storage.services.v1";
option java_outer_classname = "AuthService";

import "aruna/api/storage/models/v1/models.proto";
import "aruna/api/storage/models/v1/auth.proto";
import "aruna/api/storage/models/v1/query.proto";

import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";

service AuthService {

  // This request should be called when a new user logs in for the first time

  rpc RegisterUser(RegisterUserRequest) returns (RegisterUserResponse) {
    option (google.api.http) = {
      post : "/v1/auth/register"
      body : "*"
    };
  }

  // CreateAPIToken Creates an API token to authenticate
  rpc CreateAPIToken(CreateAPITokenRequest) returns (CreateAPITokenResponse) {
    option (google.api.http) = {
      post : "/v1/auth/token"
      body : "*"
    };
  }

  // Returns one API token by id
  rpc GetAPIToken(GetAPITokenRequest) returns (GetAPITokenResponse) {
    option (google.api.http) = {
      get : "/v1/auth/token"
    };
  }

  // Returns all API token for a specific user
  rpc GetAPITokens(GetAPITokensRequest) returns (GetAPITokensResponse) {
    option (google.api.http) = {
      get : "/v1/auth/tokens"
    };
  }

  // DeleteAPITokenRequest Deletes the specified API Token
  rpc DeleteAPIToken(DeleteAPITokenRequest) returns (DeleteAPITokenResponse) {
    option (google.api.http) = {
      delete : "/v1/auth/token/{token_id}"
    };
  }

  // DeleteAPITokenRequest Deletes the specified API Token
  rpc DeleteAPITokens(DeleteAPITokensRequest)
      returns (DeleteAPITokensResponse) {
    option (google.api.http) = {
      delete : "/v1/auth/tokens"
    };
  }

  // This creates a new authorization group.option
  // All users and collections are bundled in a authorization group.
  rpc CreateProject(CreateProjectRequest) returns (CreateProjectResponse) {
    option (google.api.http) = {
      post : "/v1/project"
      body : "*"
    };
  }

  // AddUserToProject Adds a new user to a given project by its id
  rpc AddUserToProject(AddUserToProjectRequest)
      returns (AddUserToProjectResponse) {
    option (google.api.http) = {
      post : "/v1/project/{id}/adduser"
      body : "*"
    };
  }

  // GetProjectCollections Returns all collections that belong to a certain
  // project
  rpc GetProjectCollections(GetProjectCollectionsRequest)
      returns (GetProjectCollectionsResponse) {
    option (google.api.http) = {
      get : "/v1/project/{id}/collections"
    };
  }

  // GetUserCollections Returns all collections that a specified user has access
  // to
  rpc GetUserCollections(GetUserCollectionsRequest)
      returns (GetUserCollectionsResponse) {
    option (google.api.http) = {
      get : "/v1/project/{id}/user/{user_id}/collections"
    };
  }

  // GetProject Returns the specified project
  rpc GetProject(GetProjectRequest) returns (GetProjectResponse) {
    option (google.api.http) = {
      get : "/v1/project/{id}"
    };
  }

  // This will destroy the project and all its associated data.
  // including users, collections, and API tokens and all data associated with
  // them.
  rpc DestroyProject(DestroyProjectRequest) returns (DestroyProjectResponse) {
    option (google.api.http) = {
      delete : "/v1/project/{id}"
    };
  }
}

message ExpiresAt { google.protobuf.Timestamp timestamp = 1; }

message RegisterUserRequest { string display_name = 1; }

message RegisterUserResponse { string user_id = 1; }

message CreateAPITokenRequest {
  // Empty if token_type is personal, otherwise the id of the collection or
  // project to create the token for
  string project_id = 1;
  string collection_id = 2;
  ExpiresAt expires_at = 3;
  storage.models.v1.Permission permission = 4;
}

message CreateAPITokenResponse { storage.models.v1.Token token = 1; }

message GetAPITokenRequest {
  // The token id
  string token_id = 1;
  // or the user_defined name
  string name = 2;
}

message GetAPITokenResponse {
  // List of API tokens
  storage.models.v1.Token token = 1;
}

message GetAPITokensRequest {}

message GetAPITokensResponse {
  // List of API tokens with redacted actual token
  repeated storage.models.v1.Token token = 1;
}

message DeleteAPITokenRequest {
  // The token_id
  string token_id = 1;
}

message DeleteAPITokenResponse {}

message DeleteAPITokenRequest {
  // This request invalidates all tokens of a specific user
  // usually the user_id is specified via the provided oidc or aruna token
  // This user_id can be used by admins to invalidate all tokens of a specific
  // user
  string user_id = 1;
}

message DeleteAPITokenResponse {}

message CreateProjectRequest {
  string name = 1;
  string description = 2;
}

message CreateProjectResponse { string id = 1; }

message AddUserToProjectRequest {
  // The id of the project to add the user to
  string id = 1;
  storage.models.v1.ProjectPermission user_permission = 3;
}

message AddUserToProjectResponse {}

message GetProjectCollectionsRequest {
  // The id of the project to get the collections for
  string id = 1;
  storage.models.v1.PageRequest page_request = 2;
}

message GetProjectCollectionsResponse {
  repeated storage.models.v1.CollectionOverview collection = 1;
}

message GetUserCollectionsRequest {
  // The id of the project to get the collections for
  string id = 1;
  string user_id = 2;
  storage.models.v1.PageRequest page_request = 3;
}

message GetUserCollectionsResponse {
  repeated storage.models.v1.CollectionOverview collection = 1;
}

message GetProjectRequest {
  // The id of the project to get
  string id = 1;
}

message GetProjectResponse { storage.models.v1.ProjectOverview project = 1; }

message DestroyProjectRequest {
  // The id of the project to destroy
  string id = 1;
}

message DestroyProjectResponse {}
