syntax = "proto3";

package aruna.api.storage.services.v2;
option go_package = "github.com/ArunaStorage/go-api/v2/aruna/api/storage/services/v2";
option java_multiple_files = true;
option java_package = "com.github.ArunaStorage.java_api.aruna.api.storage.services.v2";
option java_outer_classname = "ServiceAccountService";
import "aruna/api/storage/models/v2/models.proto";
import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";
import "google/api/visibility.proto";

// ServiceAccountService
//
// Status: BETA
// 
// Service that contains CRUD operations for service_accounts.
// Service accounts are project specific accounts that can be used for automation. 
service ServiceAccountService {
  option (google.api.api_visibility).restriction = "SERVER";

  // CreateServiceAccount
  //
  // Status: BETA
  // 
  // Creates a service account for a given project
  // If the service account has permissions for the global Admin project
  // it will be a global service account that can interact with any resource
  rpc CreateServiceAccount(CreateServiceAccountRequest) returns (CreateServiceAccountResponse){
    option (google.api.http) = {
      post : "/v2/service_accounts"
      body : "*"
    };
  }

  // CreateServiceAccountToken
  //
  // Status: BETA
  //
  // Creates a token for a service account
  // Each service account can only have one permission -> The token will have the same permission as the
  // service account or a subset of it.
  rpc CreateServiceAccountToken(CreateServiceAccountTokenRequest) returns (CreateServiceAccountTokenResponse){
    option (google.api.http) = {
      post : "/v2/service_accounts/{svc_account_id}/tokens"
      body : "*"
    };
  }
  
  // SetServiceAccountPermission
  //
  // Status: BETA
  //
  // Overwrites the project specific permissions for a service account
  rpc SetServiceAccountPermission(SetServiceAccountPermissionRequest) returns (SetServiceAccountPermissionResponse){
    option (google.api.http) = {
      put : "/v2/service_accounts/{svc_account_id}/permissions"
      body : "*"
    };
  }
 
  // GetServiceAccountToken
  //
  // Status: BETA
  //
  // This requests the overall information about a specifc service account token (by id)
  // it will not contain the token itself.
  rpc GetServiceAccountToken(GetServiceAccountTokenRequest) returns (GetServiceAccountTokenResponse){
    option (google.api.http) = {
      get : "/v2/service_accounts/{svc_account_id}/tokens/{token_id}"
    };
  }

  // GetServiceAccountTokens
  //
  // Status: BETA
  //
  // This requests the overall information about all service account tokens
  // it will not contain the token itself.
  rpc GetServiceAccountTokens(GetServiceAccountTokensRequest) returns (GetServiceAccountTokensResponse){
    option (google.api.http) = {
      get : "/v2/service_accounts/{svc_account_id}/tokens"
    };
  }

  // DeleteServiceAccountToken
  //
  // Status: BETA
  //
  // Deletes one service account token by ID
  rpc DeleteServiceAccountToken(DeleteServiceAccountTokenRequest) returns (DeleteServiceAccountTokenResponse){
    option (google.api.http) = {
      delete : "/v2/service_accounts/{svc_account_id}/tokens/{token_id}"
    };
  }
  
  // DeleteServiceAccountTokens
  //
  // Status: BETA
  //
  // Deletes all service account tokens
  rpc DeleteServiceAccountTokens(DeleteServiceAccountTokensRequest) returns (DeleteServiceAccountTokensResponse){
    option (google.api.http) = {
      delete : "/v2/service_accounts/{svc_account_id}/tokens"
    };
  }
  
  // DeleteServiceAccount
  //
  // Status: BETA
  //
  // Deletes a service account (by id)
  rpc DeleteServiceAccount(DeleteServiceAccountRequest) returns (DeleteServiceAccountResponse){
    option (google.api.http) = {
      delete : "/v2/service_accounts/{svc_account_id}"
    };
  }

  // GetS3Credentials
  //
  // Status: ALPHA
  //
  // Gets s3 credentials for a specific SvcAccount and data_proxy
  rpc GetS3CredentialsSvcAccount(GetS3CredentialsSvcAccountRequest)
      returns (GetS3CredentialsSvcAccountResponse) {
    option (google.api.http) = {
      get : "/v2/service_accounts/{svc_account_id}/s3_credentials"
    };
  }

  // GetDataproxyToken
  //
  // Status: ALPHA
  //
  // Gets token for a specific SvcAccount and data_proxy
  rpc CreateDataproxyTokenSvcAccount(CreateDataproxyTokenSvcAccountRequest)
      returns (CreateDataproxyTokenSvcAccountResponse) {
    option (google.api.http) = {
      post : "/v2/service_accounts/{svc_account_id}/proxy_tokens/{endpoint_id}"
      body : "*"
    };
  }


    // AddPubkeySvcAccount
  //
  // Status: ALPHA
  //
  // Adds an ED25519 public key for the SvcAccount
  rpc AddPubkeySvcAccount(AddPubkeySvcAccountRequest) returns (AddPubkeySvcAccountResponse) {
    option (google.api.http) = {
      post : "/v2/service_accounts/pubkey"
      body : "*"
    };
  }

  // AddTrustedEndpointsSvcAccount
  //
  // Status: ALPHA
  //
  // Adds an endpoint to the trusted endpoints list of the SvcAccount
  rpc AddTrustedEndpointsSvcAccount(AddTrustedEndpointsSvcAccountRequest) returns (AddTrustedEndpointsSvcAccountResponse) {
    option (google.api.http) = {
      post : "/v2/service_accounts/trusted_endpoints"
      body : "*"
    };
  }

  // RemoveTrustedEndpointsSvcAccount
  //
  // Status: ALPHA
  //
  // Removes an endpoint from the trusted endpoints list of the SvcAccount
  rpc RemoveTrustedEndpointsSvcAccount(RemoveTrustedEndpointsSvcAccountRequest) returns (RemoveTrustedEndpointsSvcAccountResponse) {
    option (google.api.http) = {
      delete : "/v2/service_accounts/trusted_endpoints"
    };
  }

  // AddDataProxyAttributeSvcAccount
  //
  // Status: ALPHA
  //
  // Adds an data proxy specific attribute to the SvcAccount
  rpc AddDataProxyAttributeSvcAccount(AddDataProxyAttributeSvcAccountRequest) returns (AddDataProxyAttributeSvcAccountResponse) {
    option (google.api.http) = {
      post : "/v2/service_accounts/{svc_account_id}/attributes/data_proxy"
      body : "*"
    };
  }

  // RemoveDataProxyAttributeSvcAccount
  //
  // Status: ALPHA
  //
  // Removes an data proxy specific attribute from the SvcAccount
  rpc RemoveDataProxyAttributeSvcAccount(RemoveDataProxyAttributeSvcAccountRequest) returns (RemoveDataProxyAttributeSvcAccountResponse) {
    option (google.api.http) = {
      delete : "/v2/service_accounts/{svc_account_id}/attributes/data_proxy"
    };
  }
}

message CreateServiceAccountRequest {
    string name = 1;
    storage.models.v2.Permission permission = 2;
}

message ServiceAccount {
    string svc_account_id = 1;
    string name = 2;
    storage.models.v2.Permission permission = 3;
}

message CreateServiceAccountResponse {
    ServiceAccount service_account = 1;
}

message CreateServiceAccountTokenRequest {
    string svc_account_id = 1;
    // Identify the associated project (should always be provided)
    storage.models.v2.Permission permission = 2;
    // (optional) Token name
    string name = 3;
    // (optional) Token expiry 
    google.protobuf.Timestamp expires_at = 4;
}

message CreateServiceAccountTokenResponse {
    // This contains only the token description
    storage.models.v2.Token token = 1;
    // This is the actual secret API token
    string token_secret = 2;
}

message SetServiceAccountPermissionRequest {
    string svc_account_id = 1;
    storage.models.v2.Permission permission = 2;
}

message SetServiceAccountPermissionResponse {
    ServiceAccount service_account = 1;
}

message GetServiceAccountTokenRequest {
    string svc_account_id = 1;
    string token_id = 2;
}

message GetServiceAccountTokenResponse {
    // This contains only the token description
    storage.models.v2.Token token = 1;
}

message GetServiceAccountTokensRequest {
    string svc_account_id = 1;
}

message GetServiceAccountTokensResponse {
    // This contains only the token description
    repeated storage.models.v2.Token tokens = 1;
}

message DeleteServiceAccountTokenRequest {
    string svc_account_id = 1;
    string token_id = 2;
}

message DeleteServiceAccountTokenResponse {}

message DeleteServiceAccountTokensRequest {
    string svc_account_id = 1;
}

message DeleteServiceAccountTokensResponse {}

message DeleteServiceAccountRequest {
    string svc_account_id = 1;
}

message DeleteServiceAccountResponse {}


message GetS3CredentialsSvcAccountRequest {
  string svc_account_id = 1;
  string endpoint_id = 2;
}

message GetS3CredentialsSvcAccountResponse {
  string s3_access_key = 1;
  string s3_secret_key = 2;
  string s3_endpoint_url = 3;
}


message CreateDataproxyTokenSvcAccountRequest {
  string svc_account_id = 1;
  string endpoint_id = 2;
  storage.models.v2.Context context = 3;
}

message CreateDataproxyTokenSvcAccountResponse {
  string token = 1;
}


message AddPubkeySvcAccountRequest {
  string public_key = 1;
}

message AddPubkeySvcAccountResponse {}

message AddTrustedEndpointsSvcAccountRequest {
  string endpoint_id = 1;
}

message AddTrustedEndpointsSvcAccountResponse {}

message RemoveTrustedEndpointsSvcAccountRequest {
  string endpoint_id = 1;
}

message RemoveTrustedEndpointsSvcAccountResponse {}

message AddDataProxyAttributeSvcAccountRequest {
  string svc_account_id = 1;
  storage.models.v2.DataProxyAttribute attribute = 2;
}

message AddDataProxyAttributeSvcAccountResponse {}

message RemoveDataProxyAttributeSvcAccountRequest {
  string svc_account_id = 1;
  string dataproxy_id = 2;
  string attribute_name = 3;
}

message RemoveDataProxyAttributeSvcAccountResponse {}