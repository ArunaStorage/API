syntax = "proto3";

package aruna.api.storage.services.v2;
option go_package = "github.com/ArunaStorage/go-api/aruna/api/storage/services/v2";
option java_multiple_files = true;
option java_package = "com.github.ArunaStorage.java_api.aruna.api.storage.services.v2";
option java_outer_classname = "UserService";

import "aruna/api/storage/models/v2/models.proto";
import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";


// UserService
//
// Contains all methods that get/create or update Users and associated resource
// including all autorization methods
service UserService {


  // RegisterUser
  //
  // Status: BETA
  //
  // This request should be called when a new user logs in for the first time
  rpc RegisterUser(RegisterUserRequest) returns (RegisterUserResponse) {
    option (google.api.http) = {
      post : "/v2/auth/register"
      body : "*"
    };
  }

  // DeActivateUser 
  //
  // Status: BETA
  //
  // This deactivates a specific user (Admin request)
  rpc DeactivateUser(DeactivateUserRequest) returns (DeactivateUserResponse) {
    option (google.api.http) = {
      patch : "/v2/user/{user_id}/deactivate"
      body : "*"
    };
  }

  // ActivateUser 
  //
  // Status: BETA
  //
  // This activates a specific user (Admin request)
  rpc ActivateUser(ActivateUserRequest) returns (ActivateUserResponse) {
    option (google.api.http) = {
      patch : "/v2/user/{user_id}/activate"
      body : "*"
    };
  }

  // CreateAPIToken
  //
  // Status: BETA
  //
  // Creates an API token to authenticate
  rpc CreateAPIToken(CreateAPITokenRequest) returns (CreateAPITokenResponse) {
    option (google.api.http) = {
      post : "/v2/auth/token"
      body : "*"
    };
  }

  // GetAPIToken
  //
  // Status: BETA
  //
  // Returns one API token by id
  rpc GetAPIToken(GetAPITokenRequest) returns (GetAPITokenResponse) {
    option (google.api.http) = {
      get : "/v2/auth/token/{token_id}"
    };
  }

  // GetAPITokens
  //
  // Status: STABLE
  //
  // Returns a list of API tokens for a specific user
  rpc GetAPITokens(GetAPITokensRequest) returns (GetAPITokensResponse) {
    option (google.api.http) = {
      get : "/v2/auth/tokens"
    };
  }

  // DeleteAPIToken
  //
  // Status: STABLE
  //
  // Deletes the specified API Token
  rpc DeleteAPIToken(DeleteAPITokenRequest) returns (DeleteAPITokenResponse) {
    option (google.api.http) = {
      delete : "/v2/auth/token/{token_id}"
    };
  }

  // DeleteAPITokens
  //
  // Status: BETA
  //
  // Deletes the specified API Token
  rpc DeleteAPITokens(DeleteAPITokensRequest)
      returns (DeleteAPITokensResponse) {
    option (google.api.http) = {
      delete : "/v2/auth/tokens"
    };
  }

  // GetUserRequest
  //
  // Status: STABLE
  //
  // This is a request that returns the user information of the
  // current user or if invoked by an admin from another user
  rpc GetUser(GetUserRequest) returns (GetUserResponse) {
    option (google.api.http) = {
      get : "/v2/user"
    };
  }

  // GetUserRequestRedacted
  //
  // Status: STABLE
  //
  // This is a request that returns the user information of the
  // current user or if invoked by an admin from another user
  // Redacts personal information like name or email
  rpc GetUserRedacted(GetUserRedactedRequest) returns (GetUserRedactedResponse) {
    option (google.api.http) = {
      get : "/v2/user/redacted"
    };
  }

  // UpdateUserDisplayName
  //
  // Status: STABLE
  //
  // Updates the Displayname for the user (Personal only)
  rpc UpdateUserDisplayName(UpdateUserDisplayNameRequest)
      returns (UpdateUserDisplayNameResponse) {
    option (google.api.http) = {
      patch : "/v2/user/{user_id}/display_name"
      body : "*"
    };
  }

  // UpdateUserDisplayName
  //
  // Status: ALPHA
  //
  // Updates the email for the user (Personal only)
  rpc UpdateUserEmail(UpdateUserEmailRequest)
      returns (UpdateUserEmailResponse) {
    option (google.api.http) = {
      patch : "/v2/user/{user_id}/email"
      body : "*"
    };
  }

  // GetNotActivatedUsers
  //
  // Status: STABLE
  //
  // Get all not activated users (Admin only)
  rpc GetNotActivatedUsers(GetNotActivatedUsersRequest)
      returns (GetNotActivatedUsersResponse) {
    option (google.api.http) = {
      get : "/v2/user/not_activated"
    };
  }

  // GetAllUsers
  //
  // Status: ALPHA
  //
  // Get all users including permissions (Admin only)
  rpc GetAllUsers(GetAllUsersRequest)
      returns (GetAllUsersResponse) {
    option (google.api.http) = {
      get : "/v2/user/all"
    };
  }

  // GetS3Credentials
  //
  // Status: ALPHA
  //
  // Gets s3 credentials for a specific user and data_proxy
  rpc GetS3Credentials(GetS3CredentialsRequest)
      returns (GetS3CredentialsResponse) {
    option (google.api.http) = {
      get : "/v2/user/{user_id}/s3_credentials"
    };
  }

}

message RegisterUserRequest {
  // user_displayname
  string display_name = 1;
  // Mail address (optional)
  string email = 2;
  // Project hint description string (optional)
  string project = 3;
}

message RegisterUserResponse {
  // Created user id
  string user_id = 1;
}



message CreateAPITokenRequest {
  // Token name
  string name = 1;
  // Personal or resource specific
  storage.models.v2.Permission permission = 2;
  // Token expiry
  google.protobuf.Timestamp expires_at = 3;
}

message CreateAPITokenResponse {
  // This contains only the token description
  storage.models.v2.Token token = 1;
  // This is the actual secret token
  // Attention, this can not be recreated and needs to be stored securely
  // New tokens will always contain a new secret
  string token_secret = 2;
}

message GetAPITokenRequest {
  // The token id
  string token_id = 1;
}

message GetAPITokenResponse {
  // List of API tokens
  storage.models.v2.Token token = 1;
}

message GetAPITokensRequest {}

message GetAPITokensResponse {
  // List of API tokens with redacted actual token
  repeated storage.models.v2.Token token = 1;
}

message DeleteAPITokenRequest {
  // The token_id
  string token_id = 1;
}

message DeleteAPITokenResponse {}

message DeleteAPITokensRequest {
  // This request invalidates all tokens of a specific user
  // usually the user_id is specified via the provided oidc or aruna token
  // This user_id can be used by admins to invalidate all tokens of a specific
  // user
  string user_id = 1;
}

message DeleteAPITokensResponse {}

message GetUserRequest {
  // Optional user_id
  string user_id = 1;
}

message GetUserResponse {
  // User info
  storage.models.v2.User user = 1;
}

message GetUserRedactedRequest {
  // Optional user_id
  string user_id = 1;
}

message GetUserRedactedResponse {
  // User info
  storage.models.v2.User user = 1;
}

message UpdateUserDisplayNameRequest {
  // New display name
  string new_display_name = 1;
}

message UpdateUserDisplayNameResponse {
  // Updated user info
  storage.models.v2.User user = 1;
}

message ActivateUserRequest {
  // User to activate
  string user_id = 1;
}

message ActivateUserResponse {}

message GetNotActivatedUsersRequest {}

message GetNotActivatedUsersResponse {
  // List of users that are not yet activated
  repeated storage.models.v2.User users = 1;
}

message GetAllUsersRequest {}

message GetAllUsersResponse {
  repeated storage.models.v2.User user = 1;
}


message DeactivateUserRequest {
  // User to activate
  string user_id = 1;
}

message DeactivateUserResponse {}


message UpdateUserEmailRequest {
  string user_id = 1;
  // If new email is empty == unsubscribe
  string new_email = 2;
}

message UpdateUserEmailResponse {
  storage.models.v2.User user = 1;
}

message GetS3CredentialsRequest {
  string user_id = 1;
  string endpoint_id = 2;
}

message GetS3CredentialsResponse {
  string s3_access_key = 1;
  string s3_secret_key = 2;
  string s3_endpoint_url = 3;
}