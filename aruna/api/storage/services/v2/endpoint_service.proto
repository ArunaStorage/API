syntax = "proto3";

package aruna.api.storage.services.v2;
option go_package = "github.com/ArunaStorage/go-api/aruna/api/storage/services/v2";
option java_multiple_files = true;
option java_package = "com.github.ArunaStorage.java_api.aruna.api.storage.services.v2";
option java_outer_classname = "EndpointService";

import "aruna/api/storage/models/v2/models.proto";
import "google/api/annotations.proto";


// EndpointService
//
// Contains all methods that get/create or update Endpoint and associated resources
service EndpointService {


  // CreateEndpoint
  //
  // Status: BETA
  //
  // Registers a new Endpoint (Aruna DataProxy) to the server
  // Needs admin permissions
  rpc CreateEndpoint(CreateEndpointRequest) returns (CreateEndpointResponse) {
    option (google.api.http) = {
      post : "/v2/endpoint"
      body : "*"
    };
  }


  // FullSyncEndpoint
  //
  // Status: BETA
  //
  // Requests a full sync of all endpoint related data
  rpc FullSyncEndpoint(FullSyncEndpointRequest) returns (FullSyncEndpointResponse) {
    option (google.api.http) = {
      get : "/v2/endpoint/sync"
    };
  }

  // GetEndpoint
  //
  // Status: BETA
  //
  // Gets an specific endpoint by ID or Name
  rpc GetEndpoint(GetEndpointRequest) returns (GetEndpointResponse) {
    option (google.api.http) = {
      get : "/v2/endpoint"
    };
  }

  // GetEndpoints
  // 
  // Status: BETA
  //
  // Gets all available endpoints
  rpc GetEndpoints(GetEndpointsRequest) returns (GetEndpointsResponse) {
    option (google.api.http) = {
      get : "/v2/endpoints"
    };
  }

  // DeleteEndpoint
  //
  // Status: BETA
  //
  // Deletes a specific endpoint by id
  // This needs admin permissions
  rpc DeleteEndpoint(DeleteEndpointRequest) returns (DeleteEndpointResponse) {
    option (google.api.http) = {
      delete : "/v2/endpoint/{endpoint_id}"
    };
  }

  // GetDefaultEndpoint
  //
  // Status: BETA
  //
  // This request returns the default endpoint for the current aruna_server
  // It may produce different results depending on the used server
  rpc GetDefaultEndpoint(GetDefaultEndpointRequest)
      returns (GetDefaultEndpointResponse) {
    option (google.api.http) = {
      get : "/v2/endpoint/default"
    };
  }
}

message CreateEndpointRequest {
  // Endpoint name
  string name = 1;
  // Endpoint type
  storage.models.v2.EndpointVariant ep_variant = 2;
  // Is this endpoint public
  bool is_public = 3;
  // required public_key
  string pubkey = 4;
  // List of EndpointHostConfigs
  repeated storage.models.v2.EndpointHostConfig host_configs = 5;
}

message CreateEndpointResponse {
  // Overview of the created endpoint
  storage.models.v2.Endpoint endpoint = 1;
}

message FullSyncEndpointRequest {}

message FullSyncEndpointResponse {
  string url = 1;
}

message GetEndpointRequest {
  // Either endpoint_name or id
  oneof endpoint {
    // The name of the endpoint
    string endpoint_name = 1;
    // Id of the endpoint
    string endpoint_id = 2;
  }
}

message GetEndpointResponse {
  // Overview of the requested endpoint
  storage.models.v2.Endpoint endpoint = 1;
}

message GetEndpointsRequest {
  // Requests all endpoints
}

message GetEndpointsResponse {
  // List of endpoints
  repeated storage.models.v2.Endpoint endpoints = 1;
}

message DeleteEndpointRequest {
  // Endpoint_id to delete
  string endpoint_id = 1;
}

message DeleteEndpointResponse {}

message GetDefaultEndpointRequest {}

message GetDefaultEndpointResponse {
  // Default endpoint of the server instance
  storage.models.v2.Endpoint endpoint = 1;
}