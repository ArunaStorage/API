syntax = "proto3";

package aruna.api.storage.services.v2;
option go_package = "github.com/ArunaStorage/go-api/aruna/api/storage/services/v2";
option java_multiple_files = true;
option java_package = "com.github.ArunaStorage.java_api.aruna.api.storage.services.v2";
option java_outer_classname = "ProjectService";

import "aruna/api/storage/models/v2/models.proto";
import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
	info: {
		title: "Aruna Object Storage (AOS) REST API";
		version: "2.0.0-rc.1"
	};
	// Overwriting host entry breaks tests, so this is not done here.
	schemes: HTTPS;
	consumes: "application/json";
	produces: "application/json";
	security_definitions: {
		security: {
			key: "AccessKeyAuth";
			value: {
				type: TYPE_API_KEY;
				in: IN_HEADER;
				name: "Authorization";
        description: "Authentication token, prefixed by Bearer: Bearer <token>"
			}
		}
	}
	security: {
		security_requirement: {
			key: "AccessKeyAuth";
			value: {}
		}
	}
};


// ProjectService
//
// Contains all methods that get/create or update Projects and associated resources
service ProjectService {

  // CreateProject
  //
  // Status: BETA
  //
  // Creates a new project. All subsequent resources are part of a project.
  rpc CreateProject(CreateProjectRequest) returns (CreateProjectResponse) {
    option (google.api.http) = {
      post : "/v2/project"
      body : "*"
    };
  }

  // GetProject
  //
  // Status: BETA
  // 
  // Requests a project (by id)
  rpc GetProject(GetProjectRequest) returns (GetProjectResponse) {
    option (google.api.http) = {
      get : "/v2/project/{project_id}"
    };
  }

  // GetProjects
  //
  // Status: BETA
  // 
  // Admin request to get all projects
  rpc GetProjects(GetProjectsRequest) returns (GetProjectsResponse) {
    option (google.api.http) = {
      get : "/v2/projects"
    };
  }

  // DeleteProject
  //
  // Status: BETA
  //
  // Deletes the project and all its associated data. Must be empty!
  rpc DeleteProject(DeleteProjectRequest) returns (DeleteProjectResponse) {
    option (google.api.http) = {
      delete : "/v2/project/{project_id}"
    };
  }

  // UpdateProjectName
  //
  // Status: BETA
  //
  // Updates the project name. Caveat! Will rename the "s3 bucket" for data proxies! 
  rpc UpdateProjectName(UpdateProjectNameRequest) returns (UpdateProjectNameResponse) {
    option (google.api.http) = {
      patch : "/v2/project/{project_id}/name"
      body : "*"
    };
  }

  // UpdateProjectDescription
  //
  // Status: BETA
  //
  // Updates the project name.
  rpc UpdateProjectDescription(UpdateProjectDescriptionRequest) returns (UpdateProjectDescriptionResponse) {
    option (google.api.http) = {
      patch : "/v2/project/{project_id}/description"
      body : "*"
    };
  }

  // UpdateProjectKeyValues
  //
  // Status: BETA
  //
  // Updates the project key values.
  rpc UpdateProjectKeyValues(UpdateProjectKeyValuesRequest) returns (UpdateProjectKeyValueResponse) {
    option (google.api.http) = {
      patch : "/v2/project/{project_id}/key_values"
      body : "*"
    };
  }
  
  // UpdateProjectExternalRelations
  //
  // Status: BETA
  //
  // Updates the project name. All (meta) data will be overwritten.
  rpc UpdateProjectExternalRelations(UpdateProjectExternalRelationsRequest) returns (UpdateProjectExternalRelationsResponse) {
    option (google.api.http) = {
      patch : "/v2/project/{project_id}/external_relations"
      body : "*"
    };
  }

  // UpdateProjectDataClass
  //
  // Status: BETA
  //
  // Updates the project name. All (meta) data will be overwritten.
  rpc UpdateProjectDataClass(UpdateProjectDataClassRequest) returns (UpdateProjectDataClassResponse) {
    option (google.api.http) = {
      patch : "/v2/project/{project_id}/data_class"
      body : "*"
    };
  }

  // ArchiveProjectRequest
  //
  // Status: BETA
  //
  // Archives the full project, rendering all downstream relations immutable
  rpc ArchiveProject(ArchiveProjectRequest) returns (ArchiveProjectResponse) {
    option (google.api.http) = {
      post : "/v2/project/{project_id}/archive"
      body : "*"
    };
  }
}

message CreateProjectRequest {
  // Project name
  string name = 1;
  // Description
  string description = 2;
  // Project specific labels / hooks
  repeated storage.models.v2.KeyValue key_values = 3;
  // External relations (URLs / IDs from external sources)
  repeated storage.models.v2.ExternalRelation external_relations = 4;
  // DataClass
  storage.models.v2.DataClass data_class = 5;
}

message CreateProjectResponse {
  // The freshly created project 
  storage.models.v2.Project project = 1;
}

message GetProjectRequest {
  // The id of the project to get
  string project_id = 1;
}

message GetProjectResponse {
  // Overview of the projectroject
  storage.models.v2.Project project = 1;
}

message GetProjectsRequest {
  // optional filter for specific ids
  repeated string project_ids = 1;
}

message GetProjectsResponse {
  // Overview of the projects
  repeated storage.models.v2.Project projects = 1;
}


message DeleteProjectRequest {
  // The id of the project to destroy
  string project_id = 1;
}

message DeleteProjectResponse {}


message UpdateProjectNameRequest {
  string project_id = 1;
  string name = 2;
}

message UpdateProjectNameResponse {
  storage.models.v2.Project project = 1;
}

message UpdateProjectDescriptionRequest {
  string project_id = 1;
  string description = 2;
}

message UpdateProjectDescriptionResponse {
  storage.models.v2.Project project = 1;
}

message UpdateProjectKeyValuesRequest {
  string project_id = 1;
  repeated storage.models.v2.KeyValue add_key_values = 2;
  repeated storage.models.v2.KeyValue remove_key_values = 3;
}

message UpdateProjectKeyValueResponse {
  storage.models.v2.Project project = 1;
}

message UpdateProjectExternalRelationsRequest {
  string project_id = 1;
  repeated storage.models.v2.ExternalRelation add_relations = 2;
  repeated storage.models.v2.ExternalRelation remove_relations = 3;
}

message UpdateProjectExternalRelationsResponse {
  storage.models.v2.Project project = 1;
}

message UpdateProjectDataClassRequest {
  string project_id = 1;
  storage.models.v2.DataClass data_class = 2;
}

message UpdateProjectDataClassResponse {
  storage.models.v2.Project project = 1;
}

message ArchiveProjectRequest {
  string project_id = 1;
}

message ArchiveProjectResponse {
  // This project will be returned via an Persistent Identifier! Updates will be impossible
  storage.models.v2.Project project = 1;
}