syntax = "proto3";

package aruna.api.storage.services.v2;
option go_package = "github.com/ArunaStorage/go-api/v2/aruna/api/storage/services/v2";
option java_multiple_files = true;
option java_package = "com.github.ArunaStorage.java_api.aruna.api.storage.services.v2";
option java_outer_classname = "ObjectService";

import "aruna/api/storage/models/v2/models.proto";
import "google/api/annotations.proto";
import "google/api/visibility.proto";

// ObjectService
//
// Status: BETA
//
// Contains all methods that get/create or update objects and associated resources
service ObjectService {
  option (google.api.api_visibility).restriction = "SERVER";

  // CreateObject
  //
  // Status: BETA
  //
  // This creates a new object and puts it in a staging area.
  // Staging objects have an "INITIALIZING" status
  // and need to be finished either manually or by uploading data.
  rpc CreateObject(CreateObjectRequest)
      returns (CreateObjectResponse) {
    option (google.api.http) = {
      post : "/v2/objects"
      body : "*"
    };
  }

  // GetUploadURL
  //
  // Status: BETA
  //
  // This is a proxy method that will call the apropriate method at dataproxy level
  // This method will return a (multi-part) url that can be used to upload a
  // file to S3. Part is a optional query parameter that can be used to upload a
  // part of the file / multipart upload.
  rpc GetUploadURL(GetUploadURLRequest) returns (GetUploadURLResponse) {
    option (google.api.http) = {
      get : "/v2/objects/{object_id}/upload"
    };
  }

  // GetDownloadUrl
  //
  // Status: BETA
  // 
  // This is a proxy method that will call the apropriate method at dataproxy level
  // will return a url that can be used to download a file from S3.
  rpc GetDownloadURL(GetDownloadURLRequest) returns (GetDownloadURLResponse) {
    option (google.api.http) = {
      get : "/v2/objects/{object_id}/download"
    };
  }

  // FinishObjectStaging
  //
  // Status: BETA
  //
  // This method completes the staging of an object.
  rpc FinishObjectStaging(FinishObjectStagingRequest)
      returns (FinishObjectStagingResponse) {
    option (google.api.http) = {
      patch : "/v2/objects/{object_id}/finish"
      body : "*"
    };
  }

  // UpdateObject
  //
  // Status: BETA
  //
  // Objects are immutable!
  // Updating an object will create a new revision for the object
  // This method will put the new revision in a staging area.
  // Staged objects will get a separate staging id and need to be finished
  // before they can be used.
  rpc UpdateObject(UpdateObjectRequest) returns (UpdateObjectResponse) {
    option (google.api.http) = {
      post : "/v2/objects/{object_id}"
      body : "*"
    };
  }

  // CloneObject 
  //
  // Status: BETA
  //
  // This method clones an object and creates a copy in the same collection.
  // This copy has a new id and revision and will not receive any updates from
  // the original object.
  rpc CloneObject(CloneObjectRequest) returns (CloneObjectResponse) {
    option (google.api.http) = {
      post : "/v2/{object_id}/clone"
      body : "*"
    };
  }

  // DeleteObject 
  //
  // Status: BETA
  //
  // Deletes the object with the complete revision history.
  rpc DeleteObject(DeleteObjectRequest) returns (DeleteObjectResponse) {
    option (google.api.http) = {
      delete : "/v2/objects/{object_id}"
      body : "*"
    };
  }
 
  // GetObject 
  //
  // Status: BETA
  // 
  // gets a specific Object by ID that is associated to the
  // current collection By default only the latest revision of an object will be
  // returned Specify a revision_number to select an older revision With the
  // optional with_url boolean a download link can automatically be requested
  rpc GetObject(GetObjectRequest) returns (GetObjectResponse) {
    option (google.api.http) = {
      get : "/v2/objects/{object_id}"
    };
  }

  // GetObjects
  //
  // Status: BETA
  //
  // Get multiple objects by ID at once
  rpc GetObjects(GetObjectsRequest) returns (GetObjectsResponse) {
    option (google.api.http) = {
      get : "/v2/objects"
    };
  }

  // UpdateTitle
  //
  // Status: ALPHA
  //
  // This method updates the title of an object
  rpc UpdateObjectTitle(UpdateObjectTitleRequest) returns (UpdateObjectTitleResponse) {
    option (google.api.http) = {
      post : "/v2/objects/{object_id}/title"
      body : "*"
    };
  }

  // UpdateAuthors
  //
  // Status: ALPHA
  //
  // This method updates the authors of an object
  rpc UpdateObjectAuthors(UpdateObjectAuthorsRequest) returns (UpdateObjectAuthorsResponse) {
    option (google.api.http) = {
      post : "/v2/objects/{object_id}/authors"
      body : "*"
    };
  }

  // SetObjectHashes
  //
  // Status: ALPHA
  //
  // This method sets the object hashes if not already set
  // if a hash is already set, it will be compared to the new hash and
  // set the status to ERROR if they do not match
  rpc SetObjectHashes(SetObjectHashesRequest) returns (SetObjectHashesResponse) {
    option (google.api.http) = {
      post : "/v2/objects/{object_id}/hashes"
      body : "*"
    };
  }
}

// Models
// These are the models for the above described requests and responses.
// gRPC best practises advice each Request and Response message in a RPC to be
// called {rpc_name}Request and {rpc_name}Response.
message CreateObjectRequest {
  // collection name
  string name = 1;
  // title
  string title = 12;
  // description
  string description = 2;
  // collection specific labels / hooks
  repeated storage.models.v2.KeyValue key_values = 3;
  // Internal / External relations (URLs / IDs from external sources)
  repeated storage.models.v2.Relation relations = 4;
  // DataClass
  storage.models.v2.DataClass data_class = 5;
  // Parent can be one of all other resources
  oneof parent {
    string project_id = 6;
    string collection_id = 7;
    string dataset_id = 8;
  }
  repeated storage.models.v2.Hash hashes = 9;
  string metadata_license_tag = 10;
  string data_license_tag = 11;
  repeated storage.models.v2.Author authors = 13;
}

message CreateObjectResponse {
  storage.models.v2.Object object = 1;
}

message GetUploadURLRequest {
  // ObjectId
  string object_id = 1;
  // Is this a multipart upload?
  bool multipart = 2;
  // (optional) if multi was initialized
  int32 part_number = 3;
}

message GetUploadURLResponse {
  // URL
  string url = 1;
}

message GetDownloadURLRequest {
  string object_id = 1;
}

message GetDownloadURLResponse {
  // URL
  string url = 1;
}

message CompletedPart {
  // Multipart identifier
  string etag = 1;
  // Part number
  int64 part = 2;
}

message FinishObjectStagingRequest {
  // ObjectId
  string object_id = 1;
  // Final content len 
  int64 content_len = 2;
  // Hash of the uploaded data - used to verify the data integrity.
  // This supports multiple hashing algorithms.
  repeated storage.models.v2.Hash hashes = 3;

  // If the upload was multipart, this is the list of parts that were uploaded.
  // Should be empty if the upload was not multipart.
  // (optional)
  repeated CompletedPart completed_parts = 4;
}

message FinishObjectStagingResponse {
  // (new) Object overview
  storage.models.v2.Object object = 1;
}

message UpdateObjectRequest {
  // Existing object ID
  string object_id = 1;
  // object name
  optional string name = 2;
  // object description
  optional string description = 3;
  // key_values to add
  repeated storage.models.v2.KeyValue add_key_values = 4;
  // key_values to remove
  repeated storage.models.v2.KeyValue remove_key_values = 5;
  // New DataClass
  storage.models.v2.DataClass data_class = 7;
  // Parent can be one of all other resources
  oneof parent {
    string project_id = 8;
    string collection_id = 9;
    string dataset_id = 10;
  }
  repeated storage.models.v2.Hash hashes = 12;
  // Force new object revision
  bool force_revision = 13;
  optional string metadata_license_tag = 14;
  optional string data_license_tag = 15;
}

message UpdateObjectResponse {
  storage.models.v2.Object object = 1;
  bool new_revision = 2;
}

message CloneObjectRequest {
  // ObjectId
  string object_id = 1;
  //
  oneof parent {
    string project_id = 2;
    string collection_id = 3;
    string dataset_id = 4;
  }
}

message CloneObjectResponse {
  // This describes the new object.
  storage.models.v2.Object object = 1;
}

message DeleteObjectRequest {
  // ObjectId
  string object_id = 1;
  // Delete including revisions
  bool with_revisions = 2;
}

message DeleteObjectResponse {}

message GetObjectRequest {
  // Object Id
  string object_id = 1;
}

message GetObjectResponse { storage.models.v2.Object object = 1; }

message GetObjectsRequest {
  // Object ids
  repeated string object_ids = 1;
}

message GetObjectsResponse {
  // A List of objects
  repeated storage.models.v2.Object objects = 1;
}

message GetObjectRevisionsRequest {
  // Object id
  string object_id = 2;
}

message GetObjectRevisionsResponse {
  // List of objects
  repeated storage.models.v2.Object objects = 1;
}

message GetLatestObjectRevisionRequest {
  // Object id
  string object_id = 1;
}

message GetLatestObjectRevisionResponse {
  // The object with the latest revision
  storage.models.v2.Object object = 1;
}

message GetObjectEndpointsRequest {
  // Collection id
  string collection_id = 1;
  // Object id
  string object_id = 2;
}

message UpdateObjectTitleRequest {
  // Object id
  string object_id = 1;
  // New title
  string title = 2;
}

message UpdateObjectTitleResponse {
  // The updated object
  storage.models.v2.Object object = 1;
}

message UpdateObjectAuthorsRequest {
  // Object id
  string object_id = 1;
  // Add authors
  repeated storage.models.v2.Author add_authors = 2;
  // Remove authors
  repeated storage.models.v2.Author remove_authors = 3;
}

message UpdateObjectAuthorsResponse {
  // The updated object
  storage.models.v2.Object object = 1;
}

message SetObjectHashesRequest {
  // Object id
  string object_id = 1;
  // Hashes
  repeated storage.models.v2.Hash hashes = 2;
}

message SetObjectHashesResponse {
  // The updated object (possibly with error status)
  storage.models.v2.Object object = 1;
}