syntax = "proto3";

package aruna.api.dataproxy.services.v2;
option go_package = "github.com/ArunaStorage/go-api/aruna/api/dataproxy/services/v2";
option java_multiple_files = true;
option java_package = "com.github.ArunaStorage.java_api.aruna.api.dataproxy.services.v2";
option java_outer_classname = "DataProxyService";

import "google/api/annotations.proto";
import "google/api/visibility.proto";
import "aruna/api/storage/models/v2/models.proto";

// DataproxyService
//
// Status: ALPHA
//
// Service for data replication between data-proxies
service DataproxyReplicationService {
    option (google.api.api_visibility).restriction = "PROXY";
    
    // RequestReplication
    //
    // Status: ALPHA
    //
    // Creates a replication stream
    rpc PullReplication(stream PullReplicationRequest) returns (stream PullReplicationResponse) {}
    
    // InitReplication
    //
    // Status: UNIMPLEMENTED
    //
    // Provides the necessary url to init replication
    rpc PushReplication(PushReplicationRequest) returns (PushReplicationResponse) {}
}


service DataproxyBackendService {
    option (google.api.api_visibility).restriction = "PROXY";
    rpc PutObject(stream PutObjectRequest) returns (PutObjectResponse) {}
    rpc GetObject(GetObjectRequest) returns (stream GetObjectResponse) {}
    rpc HeadObject(HeadObjectRequest) returns (HeadObjectResponse) {}
    rpc InitMultiPartUpload(InitMultiPartUploadRequest) returns (InitMultiPartUploadResponse) {}
    rpc UploadPart(stream UploadPartRequest) returns (UploadPartResponse) {}
    rpc CompleteMultiPartUpload(CompleteMultiPartUploadRequest) returns (CompleteMultiPartUploadResponse) {}
    rpc CreateBucket(CreateBucketRequest) returns (CreateBucketResponse) {}
    rpc DeleteBucket(DeleteBucketRequest) returns (DeleteBucketResponse) {}
    rpc DeleteObject(DeleteObjectRequest) returns (DeleteObjectResponse) {}
    rpc InitLocation(InitLocationRequest) returns (InitLocationResponse) {}
}

service DataproxyUserService {
    option (google.api.api_visibility).restriction = "PROXY";
    // GetCredentials
    //
    // Status: BETA
    //
    // Authorized method that needs a aruna-token to exchange for dataproxy
    // specific S3AccessKey and S3SecretKey
    rpc GetCredentials(GetCredentialsRequest) returns (GetCredentialsResponse) {
        option (google.api.http) = {
            get : "/v2/credentials"
        };
    }

    // CreateOrUpdateCredentials
    //
    // Status: BETA
    //
    // Authorized method that needs a aruna-token to exchange for dataproxy
    // specific S3AccessKey and S3SecretKey
    rpc CreateOrUpdateCredentials(CreateOrUpdateCredentialsRequest) returns (CreateOrUpdateCredentialsResponse) {
        option (google.api.http) = {
            post : "/v2/credentials"
            body : "*"
        };
    }


    // RevokeCredentials
    //
    // Status: BETA
    //
    // Authorized method that needs a aruna-token
    // Revokes the current credentials
    rpc RevokeCredentials(RevokeCredentialsRequest) returns (RevokeCredentialsResponse) {
        option (google.api.http) = {
            delete : "/v2/credentials"
        };
    }


    // PushReplica
    //
    // Status: UNIMPLEMENTED
    //
    // Manually transfers a replica to another data-proxy
    rpc PushReplica(PushReplicaRequest) returns (PushReplicaResponse) {
        option (google.api.http) = {
            post : "/v2/replica/push"
            body : "*"
        };
    }
    // PullReplica
    //
    // Status: UNIMPLEMENTED
    //
    // Manually request data to be transferred to this data-proxy
    rpc PullReplica(PullReplicaRequest) returns (PullReplicaResponse) {
        option (google.api.http) = {
            post : "/v2/replica/pull"
            body : "*"
        };
    }

    // ReplicationStatus
    //
    // Status: UNIMPLEMENTED
    //
    // Status of the previous replication request
    rpc ReplicationStatus(ReplicationStatusRequest) returns (ReplicationStatusResponse) {
        option (google.api.http) = {
            get : "/v2/replica/{replication_id}/status"
        };
    }
}

service DataproxyIngestionService {
    option (google.api.api_visibility).restriction = "PROXY";
    // IngestExistingObject
    //
    // Status: ALPHA
    //
    // Ingest an existing object into backend
    rpc IngestExistingObject(IngestExistingObjectRequest) returns (IngestExistingObjectResponse) {}
}


// ----- PullReplication -----
// PROXY A (data) <--> PROXY B (wants data)
// PROXY B pulls data from PROXY A

// Messages (requests) from PROXY B
message InitMessage {
    string dataproxy_id = 1;
    repeated string object_ids = 2;
}

message InfoAckMessage {
    string object_id = 1;
}

message ChunkAckMessage {
    string object_id = 1;
    int64 chunk_idx = 2;
}

message RetryChunkMessage {
    string object_id = 1;
    int64 chunk_idx = 2;
}

message Empty {}

message ErrorMessage {
    oneof error {
        RetryChunkMessage retry_chunk = 1;
        Empty abort = 2;
        string retry_object_id = 3;
    }
}

message PullReplicationRequest {
    oneof message {
        InitMessage init_message = 1;
        InfoAckMessage info_ack_message = 2;
        ChunkAckMessage chunk_ack_message = 3;
        ErrorMessage error_message = 4;
        Empty finish_message = 5;
    }
}

// Messages (responses) from PROXY A
message ObjectInfo {
    string object_id = 1;
    int64 chunks = 2;
    int64 raw_size  = 3;
    repeated uint32 block_list = 4;
    optional string extra = 5; // JSON encoded proxy specific extra fields
}

message Chunk {
    string object_id = 1;
    int64 chunk_idx = 2;
    bytes data = 3;
    string checksum = 4;
}

message PullReplicationResponse {
    oneof message {
        ObjectInfo object_info = 1;
        Chunk chunk = 2; // If no ack is received, the chunk will be resent
        Empty finish_message = 3;
    }
}

// ---------------

message DataInfo {
    string object_id = 1;
    string download_url = 2;
    string encryption_key = 3;
    bool is_compressed = 4;
}

message DataInfos {
    repeated DataInfo data_info = 1;
}

message PushReplicationRequest {
    DataInfos data_infos = 1;
}

message PushReplicationResponse {
    bool ack = 1;
}

message GetCredentialsRequest {}

message GetCredentialsResponse {
    string access_key = 1;
    string secret_key = 2;
}

message CreateOrUpdateCredentialsRequest {
}

message CreateOrUpdateCredentialsResponse {
    string access_key = 1;
    string secret_key = 2;
}

message RevokeCredentialsRequest {}

message RevokeCredentialsResponse {}

message S3Path {
    string bucket = 1;
    string key = 2;
}

message PushReplicaRequest {
    oneof resource {
        string resource_id = 1;
        S3Path s3_path = 2;
    }
    string target_endpoint_id = 3;
}

message PushReplicaResponse {
    string replication_id = 1;
}

message PullReplicaRequest {
    oneof resource {
        string resource_id = 1;
        S3Path s3_path = 2;
    }
}

message PullReplicaResponse {
    string replication_id = 1; // why ?
}

message ReplicationStatusRequest {
    string replication_id = 1; // why ?
}

enum ReplicationStatus {
    REPLICATION_STATUS_UNSPECIFIED = 0;
    REPLICATION_STATUS_PENDING = 1;
    REPLICATION_STATUS_RUNNING = 2;
    REPLICATION_STATUS_FINISHED = 3;
    REPLICATION_STATUS_ERROR = 4;
}

message ReplicationStatusResponse {
    ReplicationStatus status = 1;
    string message = 2;
}

message ObjectLocation {
    string bucket = 1;
    string key = 2;
    string upload_id = 3;
    string content_length = 4;
}

message PutObjectRequest {
    ObjectLocation location = 1;
    bytes data = 2;
}

message PutObjectResponse {}

message GetObjectRequest {
    ObjectLocation location = 1;
}

message GetObjectResponse {
    bytes data = 1;
}

message HeadObjectRequest {
    ObjectLocation location = 1;
}

message HeadObjectResponse {
    string content_length = 1;
    bool exists = 2;
}

message InitMultiPartUploadRequest {
    ObjectLocation location = 1;
}

message InitMultiPartUploadResponse {
    string upload_id = 1;
}

message UploadPartRequest {
    ObjectLocation location = 1;
    int32 part_number = 3;
    bytes data = 4;
}

message UploadPartResponse {
    string etag = 1;
}

message CompletedPart {
    int32 part_number = 1;
    string etag = 2;
}

message CompleteMultiPartUploadRequest {
    ObjectLocation location = 1;
    repeated CompletedPart completed_parts = 2;
}

message CompleteMultiPartUploadResponse {}

message CreateBucketRequest {
    string bucket = 1;
}

message CreateBucketResponse {}

message DeleteBucketRequest {
    string bucket = 1;
}

message DeleteBucketResponse {}

message DeleteObjectRequest {
    ObjectLocation location = 1;
}

message DeleteObjectResponse {}

message InitLocationRequest {
    string object_name = 1;
    int64 size = 2;
    bool is_temporary = 3;
}

message InitLocationResponse {
    ObjectLocation location = 1;
}

message IngestResource {
  // object name
  string name = 1;
  // title
  string title = 2;
  // description
  string description = 3;
  // Authors
  repeated storage.models.v2.Author authors = 4;
  // object specific labels / hooks
  repeated storage.models.v2.KeyValue key_values = 5;
  // Internal / External relations (URLs / IDs from external sources)
  repeated storage.models.v2.Relation relations = 6;
  // DataClass
  storage.models.v2.DataClass data_class = 7;
  // Ignored if Collection | Dataset
  repeated storage.models.v2.Hash hashes = 8;
  string metadata_license_tag = 9;
  string data_license_tag = 10;
}

message IngestExistingObjectRequest {
    string project_id = 1;
    oneof collection {
        string collection_id = 2;
        IngestResource collection_resource = 3;
    }
    oneof dataset {
        string dataset_id = 4;
        IngestResource dataset_resource = 5;
    }
    IngestResource object = 6;
    string path = 7; // "s3://bucket/key" or "file:///foo/bar/baz.txt" must be a valid file
}

message IngestExistingObjectResponse {
    string object_id = 1;
}


