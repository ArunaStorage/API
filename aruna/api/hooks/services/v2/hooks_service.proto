syntax = "proto3";

package aruna.api.hooks.services.v2;
option go_package = "github.com/ArunaStorage/go-api/aruna/api/storage/services/v2";
option java_multiple_files = true;
option java_package = "com.github.ArunaStorage.java_api.aruna.api.storage.services.v2";
option java_outer_classname = "HooksService"; 
import "google/api/annotations.proto";
import "aruna/api/storage/models/v2/models.proto";


// HooksService
//
// Status: ALPHA
//
// A service that enables automatic Hook scheduling
service HooksService {
    // Created Hooks are always associated with the owner that creates the hook
    rpc CreateHook(CreateHookRequest) returns (CreateHookResponse) {
        option (google.api.http) = {
            post : "/v2/hook"
            body : "*"
          };
    }
    rpc AddProjectsToHook(AddProjectsToHookRequest) returns (AddProjectsToHookResponse) {
	option (google.api.http) = {
	    post : "/v2/hook/{hook_id}/{project_id}"
	    body : "*"
	};
    }
    rpc ListProjectHooks(ListProjectHooksRequest) returns (ListProjectHooksResponse) {
        option (google.api.http) = {
            get : "/v2/hooks/project/{project_id}"
        };
    }
    rpc ListOwnedHooks(ListOwnedHooksRequest) returns (ListOwnedHooksResponse) {
        option (google.api.http) = {
            get : "/v2/hooks/owner/{user_id}"
        };
    }
    rpc DeleteHook(DeleteHookRequest) returns (DeleteHookResponse) {
        option (google.api.http) = {
            delete : "/v2/hook/{hook_id}"
        };
    }
    rpc HookCallback(HookCallbackRequest) returns (HookCallbackResponse) {
        option (google.api.http) = {
            delete : "/v2/hook/callback"
        };
    }
}

enum TriggerType {
    TRIGGER_TYPE_UNSPECIFIED = 0;
    TRIGGER_TYPE_HOOK_ADDED = 1;
    TRIGGER_TYPE_OBJECT_CREATED = 2;
    TRIGGER_TYPE_LABEL_ADDED = 3;
    TRIGGER_TYPE_STATIC_LABEL_ADDED = 4;
    TRIGGER_TYPE_HOOK_STATUS_CHANGED = 5;
}


message Trigger {
    TriggerType trigger_type = 1;
    string key = 2;
    string value = 3;
}

message ExternalHook {
    string url = 1;
    Credentials credentials = 2;
    // If empty a basic JSON template will be used
    optional string custom_template = 3; 
    Method method = 5;
    // TODO: Optional request headers
}

enum Method {
    METHOD_UNSPECIFIED = 0;
    METHOD_PUT = 1;
    METHOD_POST = 2;
}

message AddLabel {
    string key = 1;
    string value = 2;
}

message AddHook {
    string key = 1;
    string value = 2;
}

message InternalHook {
    oneof internal_action {
	AddLabel add_label = 1;
	AddHook add_hook = 2;
	storage.models.v2.Relation add_relation = 3;
    }
}

message Hook {
    oneof hook_type {
        ExternalHook external_hook = 1;
        InternalHook internal_hook = 2;
    }
}

// Will be expanded with additional credential types
message Credentials {
    string token = 1;
}

message CreateHookRequest {
    string name = 1;
    Trigger trigger = 2;
    Hook hook = 3;
    uint64 timeout = 4;
    repeated string project_ids = 5;
    string description = 6;
}
message CreateHookResponse {
    string hook_id = 1;
}

message DeleteHookRequest {
    string hook_id = 1;
}

message DeleteHookResponse {}

message HookCallbackRequest {
    oneof status {
	Finished finished = 1;
	Error error = 2;
    };
    string secret = 3;
    string hook_id = 4;
    string object_id = 5;
    int32 pubkey_serial = 6;
}
message Finished {
    repeated storage.models.v2.KeyValue add_key_values = 1;
    repeated storage.models.v2.KeyValue remove_key_values = 2;
}
message Error {
    string error = 1;
}

message HookCallbackResponse{}

message ListProjectHooksRequest{
    string project_id = 1;
}

message ListOwnedHooksRequest{
    // ADMIN only
    optional string user_id = 1;
}

message HookInfo {
    string hook_id = 1;
    repeated string project_ids = 2;
    string name = 3;
    string description = 4;
    Hook hook = 5;
    Trigger trigger = 6;
    uint64 timeout = 7;
}

message ListProjectHooksResponse{
    repeated HookInfo infos = 1;
}

message ListOwnedHooksResponse{
    repeated HookInfo infos = 1;
}

message AddProjectsToHookRequest {
    string hook_id = 1;
    repeated string project_ids = 2;
}

message AddProjectsToHookResponse {};
