syntax = "proto3";

package services;
option go_package = "github.com/ScienceObjectsDB/go-api/services";
option java_multiple_files = true;
option java_package = "com.github.ScienceObjectsDB.java_api.services";
option java_outer_classname = "ProjectAPIServices";

import "api/models/CommonModels.proto";
import "api/services/ProjectServiceModels.proto";
import "api/models/Projects.proto";
import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
	info: {
		title: "ScienceObjectsDB REST API";
		version: "0.1";
	};
	// Overwriting host entry breaks tests, so this is not done here.
	schemes: HTTPS;
	consumes: "application/json";
	produces: "application/json";
	security_definitions: {
		security: {
			key: "OAuth2";
			value: {
				type: TYPE_OAUTH2;
				flow: FLOW_IMPLICIT;
				authorization_url: "https://keycloak.infra.ingress.rancher.computational.bio/auth/realms/BioDataDB/protocol/openid-connect/auth";
				token_url: "https://keycloak.infra.ingress.rancher.computational.bio/auth/realms/BioDataDB/protocol/openid-connect/token";
				scopes: {
					scope: {
						key: "email";
						value: "Grants read access";
					}
					scope: {
						key: "profile";
						value: "Grants write access";
					}
				}
			}
		}
	}
	security: {
		security_requirement: {
			key: "OAuth2";
			value: {
				scope: "email";
				scope: "profile";
			}
		}
	}
	responses: {
		key: "403";
		value: {
			description: "Returned when the user does not have permission to access the resource.";
		}
	}
	responses: {
		key: "404";
		value: {
			description: "Returned when the resource does not exist.";
			schema: {
				json_schema: {
					type: STRING;
				}
			}
		}
	}
	responses: {
		key: "418";
		value: {
			description: "I'm a teapot.";
			schema: {
				json_schema: {
					ref: ".grpc.gateway.examples.internal.proto.examplepb.NumericEnum";
				}
			}
		}
	}
	responses: {
		key: "500";
		value: {
			description: "Server error";
			headers: {
				key: "X-Correlation-Id"
				value: {
					description: "Unique event identifier for server requests"
					type: "string"
					format: "uuid"
					default: "\"2438ac3c-37eb-4902-adef-ed16b4431030\""
					pattern: "^[0-9A-F]{8}-[0-9A-F]{4}-4[0-9A-F]{3}-[89AB][0-9A-F]{3}-[0-9A-F]{12}$"
				}
			};
			schema: {
				json_schema: {
					ref: ".grpc.gateway.examples.internal.proto.examplepb.ErrorResponse";
				}
			}
		}
	}
};

service ProjectAPI {
    //CreateProject creates a new projects
    rpc CreateProject (CreateProjectRequest) returns (models.Project) {
        option (google.api.http) = {
            post: "/api/v1/project/createproject"
            body: "*"
        };
    }

    //AddUserToProject Adds a new user to a given project
    rpc AddUserToProject (AddUserToProjectRequest) returns (models.Project) {
        option (google.api.http) = {
            post: "/api/v1/project/addusertoproject"
            body: "*"
        };
    }

    rpc CreateAPIToken(models.ID) returns (models.APIToken) {
        option (google.api.http) = {
            get: "/api/v1/createapitoken"
        };
    }

    //GetProjectDatasets Returns all datasets that belong to a certain project
    rpc GetProjectDatasets(models.ID) returns (DatasetList) {
        option (google.api.http) = {
            get: "/api/v1/project/{id}/projectdatasets"
        };
    }

    //GetUserProjects Returns all projects that a specified user has access to
    rpc GetUserProjects(models.Empty) returns (ProjectList) {
        option (google.api.http) = {
            get: "/api/v1/projects"
        };
    }

    rpc GetProject(models.ID) returns (models.Project) {
        option (google.api.http) = {
            get: "/api/v1/project/{id}"
        };
    }

    rpc GetAPIToken(models.Empty) returns (APITokenList) {
        option (google.api.http) = {
            get: "/api/v1/apitoken"
        };
    }

    //DeleteProject Deletes a specific project
    //Will also delete all associated resources (Datasets/Objects/etc...) both from objects storage and the database
    rpc DeleteProject(models.ID) returns (models.Empty) {
        option (google.api.http) = {
            get: "/api/v1/project/{id}/delete"
        };
    }

    rpc DeleteAPIToken(models.ID) returns (models.Empty) {
        option (google.api.http) = {
            delete: "/api/v1/apitoken/{id}/delete"
        };
    }
}